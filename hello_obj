
rootfs/bin/hello:     file format elf64-x86-64


Disassembly of section .text:

00000000004000e8 <_start>:
#include <stdlib.h>
#include <stdio.h>
int main(int argc, char* argv[], char* envp[]);

void _start(void) {
  4000e8:	55                   	push   %rbp
  4000e9:	48 89 e5             	mov    %rsp,%rbp
  4000ec:	48 83 ec 10          	sub    $0x10,%rsp
//	int argc = 1;
//	char* argv[0];
//	char* envp[0];
	int res;
	res = main(0, NULL, NULL);
  4000f0:	ba 00 00 00 00       	mov    $0x0,%edx
  4000f5:	be 00 00 00 00       	mov    $0x0,%esi
  4000fa:	bf 00 00 00 00       	mov    $0x0,%edi
  4000ff:	e8 15 00 00 00       	callq  400119 <main>
  400104:	89 45 fc             	mov    %eax,-0x4(%rbp)
   
    exit(res);
  400107:	8b 45 fc             	mov    -0x4(%rbp),%eax
  40010a:	89 c7                	mov    %eax,%edi
  40010c:	e8 d0 08 00 00       	callq  4009e1 <exit>
  }
  400111:	c9                   	leaveq 
  400112:	c3                   	retq   

0000000000400113 <parallel_fork>:
#include <stdlib.h>
#include <test.h>
#include <errno.h>
#include <string.h>

void parallel_fork(){
  400113:	55                   	push   %rbp
  400114:	48 89 e5             	mov    %rsp,%rbp


    //int *pipe = (int*)malloc(4*sizeof(int));


}
  400117:	5d                   	pop    %rbp
  400118:	c3                   	retq   

0000000000400119 <main>:
int main(int argc, char* argv[], char* envp[])
{
  400119:	55                   	push   %rbp
  40011a:	48 89 e5             	mov    %rsp,%rbp
  40011d:	48 83 ec 30          	sub    $0x30,%rsp
  400121:	89 7d ec             	mov    %edi,-0x14(%rbp)
  400124:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  400128:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
//    parallel_fork();
    int pid[tot] ;

    int i;
    int p;
    int status=(uint64_t)&p;
  40012c:	48 8d 45 f4          	lea    -0xc(%rbp),%rax
  400130:	89 45 f0             	mov    %eax,-0x10(%rbp)

    for(i=0;i<tot;i++){
  400133:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  40013a:	eb 36                	jmp    400172 <main+0x59>


        pid[i] = fork();
  40013c:	e8 35 08 00 00       	callq  400976 <fork>
  400141:	89 c2                	mov    %eax,%edx
  400143:	8b 45 fc             	mov    -0x4(%rbp),%eax
  400146:	48 98                	cltq   
  400148:	89 54 85 f8          	mov    %edx,-0x8(%rbp,%rax,4)

       if(pid[i] == 0){
  40014c:	8b 45 fc             	mov    -0x4(%rbp),%eax
  40014f:	48 98                	cltq   
  400151:	8b 44 85 f8          	mov    -0x8(%rbp,%rax,4),%eax
  400155:	85 c0                	test   %eax,%eax
  400157:	75 16                	jne    40016f <main+0x56>

            execve("/bin/malluaunty",NULL,NULL);
  400159:	ba 00 00 00 00       	mov    $0x0,%edx
  40015e:	be 00 00 00 00       	mov    $0x0,%esi
  400163:	48 8d 3d 93 08 00 00 	lea    0x893(%rip),%rdi        # 4009fd <exit+0x1c>
  40016a:	e8 a6 07 00 00       	callq  400915 <execve>

    int i;
    int p;
    int status=(uint64_t)&p;

    for(i=0;i<tot;i++){
  40016f:	ff 45 fc             	incl   -0x4(%rbp)
  400172:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  400176:	7e c4                	jle    40013c <main+0x23>
            execve("/bin/malluaunty",NULL,NULL);

        }

      }
    status=status;
  400178:	8b 45 f0             	mov    -0x10(%rbp),%eax
  40017b:	89 45 f0             	mov    %eax,-0x10(%rbp)
     for(i=0;i<tot;i++);;
  40017e:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  400185:	eb 03                	jmp    40018a <main+0x71>
  400187:	ff 45 fc             	incl   -0x4(%rbp)
  40018a:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  40018e:	7e f7                	jle    400187 <main+0x6e>
     {
         printf("chpid[%d]= %d",0,pid[0]);
  400190:	8b 45 f8             	mov    -0x8(%rbp),%eax
  400193:	89 c2                	mov    %eax,%edx
  400195:	be 00 00 00 00       	mov    $0x0,%esi
  40019a:	48 8d 3d 6c 08 00 00 	lea    0x86c(%rip),%rdi        # 400a0d <exit+0x2c>
  4001a1:	b8 00 00 00 00       	mov    $0x0,%eax
  4001a6:	e8 04 03 00 00       	callq  4004af <printf>
         waitpid(pid[0],&status,0);
  4001ab:	8b 45 f8             	mov    -0x8(%rbp),%eax
  4001ae:	48 8d 4d f0          	lea    -0x10(%rbp),%rcx
  4001b2:	ba 00 00 00 00       	mov    $0x0,%edx
  4001b7:	48 89 ce             	mov    %rcx,%rsi
  4001ba:	89 c7                	mov    %eax,%edi
  4001bc:	e8 bc 00 00 00       	callq  40027d <waitpid>
   }
printf("***PARENT EXITNG***\n");
  4001c1:	48 8d 3d 53 08 00 00 	lea    0x853(%rip),%rdi        # 400a1b <exit+0x3a>
  4001c8:	b8 00 00 00 00       	mov    $0x0,%eax
  4001cd:	e8 dd 02 00 00       	callq  4004af <printf>
  4001d2:	b8 00 00 00 00       	mov    $0x0,%eax


}
  4001d7:	c9                   	leaveq 
  4001d8:	c3                   	retq   

00000000004001d9 <syscall_0>:
#define _SYSCALL_H

#include <sys/defs.h>
#include <sys/syscall.h>

static __inline uint64_t syscall_0(uint64_t n) {
  4001d9:	55                   	push   %rbp
  4001da:	48 89 e5             	mov    %rsp,%rbp
  4001dd:	48 83 ec 18          	sub    $0x18,%rsp
  4001e1:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)

	uint64_t ret;
	__asm__("movq %1,%%rax;"
  4001e5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4001e9:	cd 80                	int    $0x80
  4001eb:	48 89 c0             	mov    %rax,%rax
  4001ee:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
			"int $0x80;"
			"movq %%rax,%0;"
			:"=r"(ret):"m"(n));

	return ret;
  4001f2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
  4001f6:	c9                   	leaveq 
  4001f7:	c3                   	retq   

00000000004001f8 <syscall_3>:
			"movq %%rax,%0;"
			:"=r"(ret):"m"(n),"m"(a1),"m"(a2));
	return ret;
}

static __inline uint64_t syscall_3(uint64_t n, uint64_t a1, uint64_t a2, uint64_t a3) {
  4001f8:	55                   	push   %rbp
  4001f9:	48 89 e5             	mov    %rsp,%rbp
  4001fc:	48 83 ec 30          	sub    $0x30,%rsp
  400200:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  400204:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  400208:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  40020c:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)

	uint64_t ret;
    
	__asm__("movq %1,%%rax;"
  400210:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  400214:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
  400218:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  40021c:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  400220:	cd 80                	int    $0x80
  400222:	48 89 c0             	mov    %rax,%rax
  400225:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
			"movq %3, %%rsi;"
			"movq %4, %%rdx;"
			"int $0x80;"
			"movq %%rax,%0;"
			:"=r"(ret):"m"(n),"m"(a1),"m"(a2),"m"(a3));
	return ret;
  400229:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
  40022d:	c9                   	leaveq 
  40022e:	c3                   	retq   

000000000040022f <getpid>:
#include <sys/defs.h>
#include <stdlib.h>
#include <sys/syscall.h>

pid_t getpid()
{
  40022f:	55                   	push   %rbp
  400230:	48 89 e5             	mov    %rsp,%rbp
  400233:	48 83 ec 10          	sub    $0x10,%rsp
	int retvalue;
	retvalue = syscall_0(SYS_getpid);
  400237:	bf 27 00 00 00       	mov    $0x27,%edi
  40023c:	e8 98 ff ff ff       	callq  4001d9 <syscall_0>
  400241:	89 45 fc             	mov    %eax,-0x4(%rbp)
	if(retvalue >=0){
  400244:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  400248:	78 05                	js     40024f <getpid+0x20>
		return retvalue;
  40024a:	8b 45 fc             	mov    -0x4(%rbp),%eax
  40024d:	eb 05                	jmp    400254 <getpid+0x25>
	}
	return -1;
  40024f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax


}
  400254:	c9                   	leaveq 
  400255:	c3                   	retq   

0000000000400256 <getppid>:

pid_t getppid()
{
  400256:	55                   	push   %rbp
  400257:	48 89 e5             	mov    %rsp,%rbp
  40025a:	48 83 ec 10          	sub    $0x10,%rsp
	int retvalue;
	retvalue = syscall_0(SYS_getppid);
  40025e:	bf 6e 00 00 00       	mov    $0x6e,%edi
  400263:	e8 71 ff ff ff       	callq  4001d9 <syscall_0>
  400268:	89 45 fc             	mov    %eax,-0x4(%rbp)
	if(retvalue >=0){
  40026b:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  40026f:	78 05                	js     400276 <getppid+0x20>
		return retvalue;
  400271:	8b 45 fc             	mov    -0x4(%rbp),%eax
  400274:	eb 05                	jmp    40027b <getppid+0x25>
	}

	return -1;
  400276:	b8 ff ff ff ff       	mov    $0xffffffff,%eax


}
  40027b:	c9                   	leaveq 
  40027c:	c3                   	retq   

000000000040027d <waitpid>:

pid_t waitpid(pid_t pid, int *status, int options)
{
  40027d:	55                   	push   %rbp
  40027e:	48 89 e5             	mov    %rsp,%rbp
  400281:	48 83 ec 20          	sub    $0x20,%rsp
  400285:	89 7d ec             	mov    %edi,-0x14(%rbp)
  400288:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  40028c:	89 55 e8             	mov    %edx,-0x18(%rbp)
	pid_t retvalue;
	retvalue = syscall_3(SYS_wait4,(uint64_t)pid,(uint64_t)status,(uint64_t)options);
  40028f:	8b 45 e8             	mov    -0x18(%rbp),%eax
  400292:	48 63 c8             	movslq %eax,%rcx
  400295:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  400299:	8b 45 ec             	mov    -0x14(%rbp),%eax
  40029c:	48 89 c6             	mov    %rax,%rsi
  40029f:	bf 3d 00 00 00       	mov    $0x3d,%edi
  4002a4:	e8 4f ff ff ff       	callq  4001f8 <syscall_3>
  4002a9:	89 45 fc             	mov    %eax,-0x4(%rbp)
	if(retvalue >=0){
		return retvalue;
  4002ac:	8b 45 fc             	mov    -0x4(%rbp),%eax
	}

	return -1;

}
  4002af:	c9                   	leaveq 
  4002b0:	c3                   	retq   

00000000004002b1 <print_num>:

// update errno.
char screen[1024];
int screen_ctr;
void print_num(int num, int base)
{
  4002b1:	55                   	push   %rbp
  4002b2:	48 89 e5             	mov    %rsp,%rbp
  4002b5:	48 81 ec 98 00 00 00 	sub    $0x98,%rsp
  4002bc:	89 bd 6c ff ff ff    	mov    %edi,-0x94(%rbp)
  4002c2:	89 b5 68 ff ff ff    	mov    %esi,-0x98(%rbp)
	int number[32];
	int i=0;
  4002c8:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)

	if(base == 16)
  4002cf:	83 bd 68 ff ff ff 10 	cmpl   $0x10,-0x98(%rbp)
  4002d6:	75 44                	jne    40031c <print_num+0x6b>
	{
		screen[screen_ctr++] = '0';
  4002d8:	48 8b 05 21 0d 20 00 	mov    0x200d21(%rip),%rax        # 601000 <exit+0x20061f>
  4002df:	8b 00                	mov    (%rax),%eax
  4002e1:	8d 48 01             	lea    0x1(%rax),%ecx
  4002e4:	48 8b 15 15 0d 20 00 	mov    0x200d15(%rip),%rdx        # 601000 <exit+0x20061f>
  4002eb:	89 0a                	mov    %ecx,(%rdx)
  4002ed:	48 8b 15 14 0d 20 00 	mov    0x200d14(%rip),%rdx        # 601008 <exit+0x200627>
  4002f4:	48 98                	cltq   
  4002f6:	c6 04 02 30          	movb   $0x30,(%rdx,%rax,1)
		screen[screen_ctr++] = 'x';
  4002fa:	48 8b 05 ff 0c 20 00 	mov    0x200cff(%rip),%rax        # 601000 <exit+0x20061f>
  400301:	8b 00                	mov    (%rax),%eax
  400303:	8d 48 01             	lea    0x1(%rax),%ecx
  400306:	48 8b 15 f3 0c 20 00 	mov    0x200cf3(%rip),%rdx        # 601000 <exit+0x20061f>
  40030d:	89 0a                	mov    %ecx,(%rdx)
  40030f:	48 8b 15 f2 0c 20 00 	mov    0x200cf2(%rip),%rdx        # 601008 <exit+0x200627>
  400316:	48 98                	cltq   
  400318:	c6 04 02 78          	movb   $0x78,(%rdx,%rax,1)
	}
	do
	{
		int rem=num%base;
  40031c:	8b 85 6c ff ff ff    	mov    -0x94(%rbp),%eax
  400322:	99                   	cltd   
  400323:	f7 bd 68 ff ff ff    	idivl  -0x98(%rbp)
  400329:	89 55 f8             	mov    %edx,-0x8(%rbp)
		if((rem) >= 10)
  40032c:	83 7d f8 09          	cmpl   $0x9,-0x8(%rbp)
  400330:	7e 06                	jle    400338 <print_num+0x87>
		{

			rem = rem-10 + 'a';
  400332:	83 45 f8 57          	addl   $0x57,-0x8(%rbp)
  400336:	eb 04                	jmp    40033c <print_num+0x8b>
		}
		else{
			rem = rem + '0';
  400338:	83 45 f8 30          	addl   $0x30,-0x8(%rbp)
		}
		number[i]= rem;
  40033c:	8b 45 fc             	mov    -0x4(%rbp),%eax
  40033f:	48 98                	cltq   
  400341:	8b 55 f8             	mov    -0x8(%rbp),%edx
  400344:	89 94 85 78 ff ff ff 	mov    %edx,-0x88(%rbp,%rax,4)
		i++;
  40034b:	ff 45 fc             	incl   -0x4(%rbp)
	}while((num=num/base) !=0);
  40034e:	8b 85 6c ff ff ff    	mov    -0x94(%rbp),%eax
  400354:	99                   	cltd   
  400355:	f7 bd 68 ff ff ff    	idivl  -0x98(%rbp)
  40035b:	89 85 6c ff ff ff    	mov    %eax,-0x94(%rbp)
  400361:	83 bd 6c ff ff ff 00 	cmpl   $0x0,-0x94(%rbp)
  400368:	75 b2                	jne    40031c <print_num+0x6b>


	while(i-- != 0)
  40036a:	eb 2e                	jmp    40039a <print_num+0xe9>
	{

		screen[screen_ctr++] = number[i];
  40036c:	48 8b 05 8d 0c 20 00 	mov    0x200c8d(%rip),%rax        # 601000 <exit+0x20061f>
  400373:	8b 00                	mov    (%rax),%eax
  400375:	8d 48 01             	lea    0x1(%rax),%ecx
  400378:	48 8b 15 81 0c 20 00 	mov    0x200c81(%rip),%rdx        # 601000 <exit+0x20061f>
  40037f:	89 0a                	mov    %ecx,(%rdx)
  400381:	8b 55 fc             	mov    -0x4(%rbp),%edx
  400384:	48 63 d2             	movslq %edx,%rdx
  400387:	8b 94 95 78 ff ff ff 	mov    -0x88(%rbp,%rdx,4),%edx
  40038e:	48 8b 0d 73 0c 20 00 	mov    0x200c73(%rip),%rcx        # 601008 <exit+0x200627>
  400395:	48 98                	cltq   
  400397:	88 14 01             	mov    %dl,(%rcx,%rax,1)
		number[i]= rem;
		i++;
	}while((num=num/base) !=0);


	while(i-- != 0)
  40039a:	8b 45 fc             	mov    -0x4(%rbp),%eax
  40039d:	8d 50 ff             	lea    -0x1(%rax),%edx
  4003a0:	89 55 fc             	mov    %edx,-0x4(%rbp)
  4003a3:	85 c0                	test   %eax,%eax
  4003a5:	75 c5                	jne    40036c <print_num+0xbb>
	{

		screen[screen_ctr++] = number[i];
	}
}
  4003a7:	c9                   	leaveq 
  4003a8:	c3                   	retq   

00000000004003a9 <print_ptr>:



void print_ptr(long unsigned int num, long unsigned int base)
{
  4003a9:	55                   	push   %rbp
  4003aa:	48 89 e5             	mov    %rsp,%rbp
  4003ad:	48 81 ec 20 01 00 00 	sub    $0x120,%rsp
  4003b4:	48 89 bd e8 fe ff ff 	mov    %rdi,-0x118(%rbp)
  4003bb:	48 89 b5 e0 fe ff ff 	mov    %rsi,-0x120(%rbp)
	long unsigned int number[32];
	int i=0;
  4003c2:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)

		screen[screen_ctr++] = '0';
  4003c9:	48 8b 05 30 0c 20 00 	mov    0x200c30(%rip),%rax        # 601000 <exit+0x20061f>
  4003d0:	8b 00                	mov    (%rax),%eax
  4003d2:	8d 48 01             	lea    0x1(%rax),%ecx
  4003d5:	48 8b 15 24 0c 20 00 	mov    0x200c24(%rip),%rdx        # 601000 <exit+0x20061f>
  4003dc:	89 0a                	mov    %ecx,(%rdx)
  4003de:	48 8b 15 23 0c 20 00 	mov    0x200c23(%rip),%rdx        # 601008 <exit+0x200627>
  4003e5:	48 98                	cltq   
  4003e7:	c6 04 02 30          	movb   $0x30,(%rdx,%rax,1)
		screen[screen_ctr++] = 'x';
  4003eb:	48 8b 05 0e 0c 20 00 	mov    0x200c0e(%rip),%rax        # 601000 <exit+0x20061f>
  4003f2:	8b 00                	mov    (%rax),%eax
  4003f4:	8d 48 01             	lea    0x1(%rax),%ecx
  4003f7:	48 8b 15 02 0c 20 00 	mov    0x200c02(%rip),%rdx        # 601000 <exit+0x20061f>
  4003fe:	89 0a                	mov    %ecx,(%rdx)
  400400:	48 8b 15 01 0c 20 00 	mov    0x200c01(%rip),%rdx        # 601008 <exit+0x200627>
  400407:	48 98                	cltq   
  400409:	c6 04 02 78          	movb   $0x78,(%rdx,%rax,1)
	
	do
	{
		long unsigned int rem=num%base;
  40040d:	48 8b 85 e8 fe ff ff 	mov    -0x118(%rbp),%rax
  400414:	ba 00 00 00 00       	mov    $0x0,%edx
  400419:	48 f7 b5 e0 fe ff ff 	divq   -0x120(%rbp)
  400420:	48 89 55 f0          	mov    %rdx,-0x10(%rbp)
		if((rem) >= 10)
  400424:	48 83 7d f0 09       	cmpq   $0x9,-0x10(%rbp)
  400429:	76 07                	jbe    400432 <print_ptr+0x89>
		{
			rem = rem-10 + 'a';
  40042b:	48 83 45 f0 57       	addq   $0x57,-0x10(%rbp)
  400430:	eb 05                	jmp    400437 <print_ptr+0x8e>
		}
		else{
			rem = rem + '0';
  400432:	48 83 45 f0 30       	addq   $0x30,-0x10(%rbp)
		}
		number[i]= rem;
  400437:	8b 45 fc             	mov    -0x4(%rbp),%eax
  40043a:	48 98                	cltq   
  40043c:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  400440:	48 89 94 c5 f0 fe ff 	mov    %rdx,-0x110(%rbp,%rax,8)
  400447:	ff 
		i++;
  400448:	ff 45 fc             	incl   -0x4(%rbp)
	}while((num=num/base) !=0);
  40044b:	48 8b 85 e8 fe ff ff 	mov    -0x118(%rbp),%rax
  400452:	ba 00 00 00 00       	mov    $0x0,%edx
  400457:	48 f7 b5 e0 fe ff ff 	divq   -0x120(%rbp)
  40045e:	48 89 85 e8 fe ff ff 	mov    %rax,-0x118(%rbp)
  400465:	48 83 bd e8 fe ff ff 	cmpq   $0x0,-0x118(%rbp)
  40046c:	00 
  40046d:	75 9e                	jne    40040d <print_ptr+0x64>


	while(i-- != 0)
  40046f:	eb 2f                	jmp    4004a0 <print_ptr+0xf7>
	{

		screen[screen_ctr++] = number[i];
  400471:	48 8b 05 88 0b 20 00 	mov    0x200b88(%rip),%rax        # 601000 <exit+0x20061f>
  400478:	8b 00                	mov    (%rax),%eax
  40047a:	8d 48 01             	lea    0x1(%rax),%ecx
  40047d:	48 8b 15 7c 0b 20 00 	mov    0x200b7c(%rip),%rdx        # 601000 <exit+0x20061f>
  400484:	89 0a                	mov    %ecx,(%rdx)
  400486:	8b 55 fc             	mov    -0x4(%rbp),%edx
  400489:	48 63 d2             	movslq %edx,%rdx
  40048c:	48 8b 94 d5 f0 fe ff 	mov    -0x110(%rbp,%rdx,8),%rdx
  400493:	ff 
  400494:	48 8b 0d 6d 0b 20 00 	mov    0x200b6d(%rip),%rcx        # 601008 <exit+0x200627>
  40049b:	48 98                	cltq   
  40049d:	88 14 01             	mov    %dl,(%rcx,%rax,1)
		number[i]= rem;
		i++;
	}while((num=num/base) !=0);


	while(i-- != 0)
  4004a0:	8b 45 fc             	mov    -0x4(%rbp),%eax
  4004a3:	8d 50 ff             	lea    -0x1(%rax),%edx
  4004a6:	89 55 fc             	mov    %edx,-0x4(%rbp)
  4004a9:	85 c0                	test   %eax,%eax
  4004ab:	75 c4                	jne    400471 <print_ptr+0xc8>
	{

		screen[screen_ctr++] = number[i];
    }
}
  4004ad:	c9                   	leaveq 
  4004ae:	c3                   	retq   

00000000004004af <printf>:





int printf(const char *format, ...) {
  4004af:	55                   	push   %rbp
  4004b0:	48 89 e5             	mov    %rsp,%rbp
  4004b3:	48 81 ec 90 00 00 00 	sub    $0x90,%rsp
  4004ba:	48 89 75 d8          	mov    %rsi,-0x28(%rbp)
  4004be:	48 89 55 e0          	mov    %rdx,-0x20(%rbp)
  4004c2:	48 89 4d e8          	mov    %rcx,-0x18(%rbp)
  4004c6:	4c 89 45 f0          	mov    %r8,-0x10(%rbp)
  4004ca:	4c 89 4d f8          	mov    %r9,-0x8(%rbp)
  4004ce:	48 89 bd 78 ff ff ff 	mov    %rdi,-0x88(%rbp)
	va_list val;
	int printed = 0;
  4004d5:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%rbp)
	screen_ctr=0;
  4004dc:	48 8b 05 1d 0b 20 00 	mov    0x200b1d(%rip),%rax        # 601000 <exit+0x20061f>
  4004e3:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
	va_start(val, format);
  4004e9:	c7 45 88 08 00 00 00 	movl   $0x8,-0x78(%rbp)
  4004f0:	48 8d 45 10          	lea    0x10(%rbp),%rax
  4004f4:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  4004f8:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  4004fc:	48 89 45 98          	mov    %rax,-0x68(%rbp)

	while(*format)
  400500:	e9 0d 03 00 00       	jmpq   400812 <printf+0x363>
	{
		if(*format == '%')
  400505:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  40050c:	0f b6 00             	movzbl (%rax),%eax
  40050f:	3c 25                	cmp    $0x25,%al
  400511:	0f 85 c6 02 00 00    	jne    4007dd <printf+0x32e>
		{
			switch(*(++format))
  400517:	48 ff 85 78 ff ff ff 	incq   -0x88(%rbp)
  40051e:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  400525:	0f b6 00             	movzbl (%rax),%eax
  400528:	0f be c0             	movsbl %al,%eax
  40052b:	83 f8 64             	cmp    $0x64,%eax
  40052e:	74 3c                	je     40056c <printf+0xbd>
  400530:	83 f8 64             	cmp    $0x64,%eax
  400533:	7f 17                	jg     40054c <printf+0x9d>
  400535:	83 f8 25             	cmp    $0x25,%eax
  400538:	0f 84 73 02 00 00    	je     4007b1 <printf+0x302>
  40053e:	83 f8 63             	cmp    $0x63,%eax
  400541:	0f 84 ae 00 00 00    	je     4005f5 <printf+0x146>
  400547:	e9 c6 02 00 00       	jmpq   400812 <printf+0x363>
  40054c:	83 f8 73             	cmp    $0x73,%eax
  40054f:	0f 84 03 01 00 00    	je     400658 <printf+0x1a9>
  400555:	83 f8 78             	cmp    $0x78,%eax
  400558:	0f 84 7b 01 00 00    	je     4006d9 <printf+0x22a>
  40055e:	83 f8 70             	cmp    $0x70,%eax
  400561:	0f 84 fb 01 00 00    	je     400762 <printf+0x2b3>
  400567:	e9 a6 02 00 00       	jmpq   400812 <printf+0x363>
			{
			case 'd':
				printed=printed;
				int num = va_arg(val, int);
  40056c:	8b 45 88             	mov    -0x78(%rbp),%eax
  40056f:	83 f8 30             	cmp    $0x30,%eax
  400572:	73 17                	jae    40058b <printf+0xdc>
  400574:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  400578:	8b 45 88             	mov    -0x78(%rbp),%eax
  40057b:	89 c0                	mov    %eax,%eax
  40057d:	48 01 d0             	add    %rdx,%rax
  400580:	8b 55 88             	mov    -0x78(%rbp),%edx
  400583:	83 c2 08             	add    $0x8,%edx
  400586:	89 55 88             	mov    %edx,-0x78(%rbp)
  400589:	eb 0f                	jmp    40059a <printf+0xeb>
  40058b:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  40058f:	48 89 d0             	mov    %rdx,%rax
  400592:	48 83 c2 08          	add    $0x8,%rdx
  400596:	48 89 55 90          	mov    %rdx,-0x70(%rbp)
  40059a:	8b 00                	mov    (%rax),%eax
  40059c:	89 45 bc             	mov    %eax,-0x44(%rbp)
				if(num<0)
  40059f:	83 7d bc 00          	cmpl   $0x0,-0x44(%rbp)
  4005a3:	79 35                	jns    4005da <printf+0x12b>
				{
					screen[screen_ctr++]='-';
  4005a5:	48 8b 05 54 0a 20 00 	mov    0x200a54(%rip),%rax        # 601000 <exit+0x20061f>
  4005ac:	8b 00                	mov    (%rax),%eax
  4005ae:	8d 48 01             	lea    0x1(%rax),%ecx
  4005b1:	48 8b 15 48 0a 20 00 	mov    0x200a48(%rip),%rdx        # 601000 <exit+0x20061f>
  4005b8:	89 0a                	mov    %ecx,(%rdx)
  4005ba:	48 8b 15 47 0a 20 00 	mov    0x200a47(%rip),%rdx        # 601008 <exit+0x200627>
  4005c1:	48 98                	cltq   
  4005c3:	c6 04 02 2d          	movb   $0x2d,(%rdx,%rax,1)
					print_num(-num,10);
  4005c7:	8b 45 bc             	mov    -0x44(%rbp),%eax
  4005ca:	f7 d8                	neg    %eax
  4005cc:	be 0a 00 00 00       	mov    $0xa,%esi
  4005d1:	89 c7                	mov    %eax,%edi
  4005d3:	e8 d9 fc ff ff       	callq  4002b1 <print_num>
  4005d8:	eb 0f                	jmp    4005e9 <printf+0x13a>
				}
				else
					print_num(num,10);
  4005da:	8b 45 bc             	mov    -0x44(%rbp),%eax
  4005dd:	be 0a 00 00 00       	mov    $0xa,%esi
  4005e2:	89 c7                	mov    %eax,%edi
  4005e4:	e8 c8 fc ff ff       	callq  4002b1 <print_num>
				format++;
  4005e9:	48 ff 85 78 ff ff ff 	incq   -0x88(%rbp)
				continue;
  4005f0:	e9 1d 02 00 00       	jmpq   400812 <printf+0x363>

			case 'c':
				printed=printed;;
				int chr = va_arg(val, int);
  4005f5:	8b 45 88             	mov    -0x78(%rbp),%eax
  4005f8:	83 f8 30             	cmp    $0x30,%eax
  4005fb:	73 17                	jae    400614 <printf+0x165>
  4005fd:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  400601:	8b 45 88             	mov    -0x78(%rbp),%eax
  400604:	89 c0                	mov    %eax,%eax
  400606:	48 01 d0             	add    %rdx,%rax
  400609:	8b 55 88             	mov    -0x78(%rbp),%edx
  40060c:	83 c2 08             	add    $0x8,%edx
  40060f:	89 55 88             	mov    %edx,-0x78(%rbp)
  400612:	eb 0f                	jmp    400623 <printf+0x174>
  400614:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  400618:	48 89 d0             	mov    %rdx,%rax
  40061b:	48 83 c2 08          	add    $0x8,%rdx
  40061f:	48 89 55 90          	mov    %rdx,-0x70(%rbp)
  400623:	8b 00                	mov    (%rax),%eax
  400625:	89 45 b8             	mov    %eax,-0x48(%rbp)
				screen[screen_ctr++] = chr;
  400628:	48 8b 05 d1 09 20 00 	mov    0x2009d1(%rip),%rax        # 601000 <exit+0x20061f>
  40062f:	8b 00                	mov    (%rax),%eax
  400631:	8d 48 01             	lea    0x1(%rax),%ecx
  400634:	48 8b 15 c5 09 20 00 	mov    0x2009c5(%rip),%rdx        # 601000 <exit+0x20061f>
  40063b:	89 0a                	mov    %ecx,(%rdx)
  40063d:	8b 55 b8             	mov    -0x48(%rbp),%edx
  400640:	48 8b 0d c1 09 20 00 	mov    0x2009c1(%rip),%rcx        # 601008 <exit+0x200627>
  400647:	48 98                	cltq   
  400649:	88 14 01             	mov    %dl,(%rcx,%rax,1)
				format++;
  40064c:	48 ff 85 78 ff ff ff 	incq   -0x88(%rbp)
				continue;
  400653:	e9 ba 01 00 00       	jmpq   400812 <printf+0x363>

			case 's':
				printed=printed;
				char* str = va_arg(val, char*);
  400658:	8b 45 88             	mov    -0x78(%rbp),%eax
  40065b:	83 f8 30             	cmp    $0x30,%eax
  40065e:	73 17                	jae    400677 <printf+0x1c8>
  400660:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  400664:	8b 45 88             	mov    -0x78(%rbp),%eax
  400667:	89 c0                	mov    %eax,%eax
  400669:	48 01 d0             	add    %rdx,%rax
  40066c:	8b 55 88             	mov    -0x78(%rbp),%edx
  40066f:	83 c2 08             	add    $0x8,%edx
  400672:	89 55 88             	mov    %edx,-0x78(%rbp)
  400675:	eb 0f                	jmp    400686 <printf+0x1d7>
  400677:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  40067b:	48 89 d0             	mov    %rdx,%rax
  40067e:	48 83 c2 08          	add    $0x8,%rdx
  400682:	48 89 55 90          	mov    %rdx,-0x70(%rbp)
  400686:	48 8b 00             	mov    (%rax),%rax
  400689:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
				while(*(str) != '\0')
  40068d:	eb 33                	jmp    4006c2 <printf+0x213>
					screen[screen_ctr++] = *str++;
  40068f:	48 8b 05 6a 09 20 00 	mov    0x20096a(%rip),%rax        # 601000 <exit+0x20061f>
  400696:	8b 00                	mov    (%rax),%eax
  400698:	89 c2                	mov    %eax,%edx
  40069a:	8d 4a 01             	lea    0x1(%rdx),%ecx
  40069d:	48 8b 05 5c 09 20 00 	mov    0x20095c(%rip),%rax        # 601000 <exit+0x20061f>
  4006a4:	89 08                	mov    %ecx,(%rax)
  4006a6:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  4006aa:	48 8d 48 01          	lea    0x1(%rax),%rcx
  4006ae:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
  4006b2:	0f b6 00             	movzbl (%rax),%eax
  4006b5:	48 8b 0d 4c 09 20 00 	mov    0x20094c(%rip),%rcx        # 601008 <exit+0x200627>
  4006bc:	48 63 d2             	movslq %edx,%rdx
  4006bf:	88 04 11             	mov    %al,(%rcx,%rdx,1)
				continue;

			case 's':
				printed=printed;
				char* str = va_arg(val, char*);
				while(*(str) != '\0')
  4006c2:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  4006c6:	0f b6 00             	movzbl (%rax),%eax
  4006c9:	84 c0                	test   %al,%al
  4006cb:	75 c2                	jne    40068f <printf+0x1e0>
					screen[screen_ctr++] = *str++;
				format++;
  4006cd:	48 ff 85 78 ff ff ff 	incq   -0x88(%rbp)
				continue;
  4006d4:	e9 39 01 00 00       	jmpq   400812 <printf+0x363>

			case 'x':
				printed=printed;
				int hex = va_arg(val, int);
  4006d9:	8b 45 88             	mov    -0x78(%rbp),%eax
  4006dc:	83 f8 30             	cmp    $0x30,%eax
  4006df:	73 17                	jae    4006f8 <printf+0x249>
  4006e1:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  4006e5:	8b 45 88             	mov    -0x78(%rbp),%eax
  4006e8:	89 c0                	mov    %eax,%eax
  4006ea:	48 01 d0             	add    %rdx,%rax
  4006ed:	8b 55 88             	mov    -0x78(%rbp),%edx
  4006f0:	83 c2 08             	add    $0x8,%edx
  4006f3:	89 55 88             	mov    %edx,-0x78(%rbp)
  4006f6:	eb 0f                	jmp    400707 <printf+0x258>
  4006f8:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  4006fc:	48 89 d0             	mov    %rdx,%rax
  4006ff:	48 83 c2 08          	add    $0x8,%rdx
  400703:	48 89 55 90          	mov    %rdx,-0x70(%rbp)
  400707:	8b 00                	mov    (%rax),%eax
  400709:	89 45 b4             	mov    %eax,-0x4c(%rbp)
				if(hex<0)
  40070c:	83 7d b4 00          	cmpl   $0x0,-0x4c(%rbp)
  400710:	79 35                	jns    400747 <printf+0x298>
				{
					screen[screen_ctr++]='-';
  400712:	48 8b 05 e7 08 20 00 	mov    0x2008e7(%rip),%rax        # 601000 <exit+0x20061f>
  400719:	8b 00                	mov    (%rax),%eax
  40071b:	8d 48 01             	lea    0x1(%rax),%ecx
  40071e:	48 8b 15 db 08 20 00 	mov    0x2008db(%rip),%rdx        # 601000 <exit+0x20061f>
  400725:	89 0a                	mov    %ecx,(%rdx)
  400727:	48 8b 15 da 08 20 00 	mov    0x2008da(%rip),%rdx        # 601008 <exit+0x200627>
  40072e:	48 98                	cltq   
  400730:	c6 04 02 2d          	movb   $0x2d,(%rdx,%rax,1)
					print_num(-hex,16);
  400734:	8b 45 b4             	mov    -0x4c(%rbp),%eax
  400737:	f7 d8                	neg    %eax
  400739:	be 10 00 00 00       	mov    $0x10,%esi
  40073e:	89 c7                	mov    %eax,%edi
  400740:	e8 6c fb ff ff       	callq  4002b1 <print_num>
  400745:	eb 0f                	jmp    400756 <printf+0x2a7>
				}
				else
					print_num(hex,16);
  400747:	8b 45 b4             	mov    -0x4c(%rbp),%eax
  40074a:	be 10 00 00 00       	mov    $0x10,%esi
  40074f:	89 c7                	mov    %eax,%edi
  400751:	e8 5b fb ff ff       	callq  4002b1 <print_num>

				format++;
  400756:	48 ff 85 78 ff ff ff 	incq   -0x88(%rbp)
				continue;
  40075d:	e9 b0 00 00 00       	jmpq   400812 <printf+0x363>

			case 'p':
				printed=printed;
				long unsigned int ptr =(unsigned long int) va_arg(val, long int );
  400762:	8b 45 88             	mov    -0x78(%rbp),%eax
  400765:	83 f8 30             	cmp    $0x30,%eax
  400768:	73 17                	jae    400781 <printf+0x2d2>
  40076a:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  40076e:	8b 45 88             	mov    -0x78(%rbp),%eax
  400771:	89 c0                	mov    %eax,%eax
  400773:	48 01 d0             	add    %rdx,%rax
  400776:	8b 55 88             	mov    -0x78(%rbp),%edx
  400779:	83 c2 08             	add    $0x8,%edx
  40077c:	89 55 88             	mov    %edx,-0x78(%rbp)
  40077f:	eb 0f                	jmp    400790 <printf+0x2e1>
  400781:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  400785:	48 89 d0             	mov    %rdx,%rax
  400788:	48 83 c2 08          	add    $0x8,%rdx
  40078c:	48 89 55 90          	mov    %rdx,-0x70(%rbp)
  400790:	48 8b 00             	mov    (%rax),%rax
  400793:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
				print_ptr(ptr,16);
  400797:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  40079b:	be 10 00 00 00       	mov    $0x10,%esi
  4007a0:	48 89 c7             	mov    %rax,%rdi
  4007a3:	e8 01 fc ff ff       	callq  4003a9 <print_ptr>

				format++;
  4007a8:	48 ff 85 78 ff ff ff 	incq   -0x88(%rbp)
				continue;
  4007af:	eb 61                	jmp    400812 <printf+0x363>


			case '%':
				printed=printed;
				char c='%';
  4007b1:	c6 45 a7 25          	movb   $0x25,-0x59(%rbp)

				screen[screen_ctr++] = c;
  4007b5:	48 8b 05 44 08 20 00 	mov    0x200844(%rip),%rax        # 601000 <exit+0x20061f>
  4007bc:	8b 00                	mov    (%rax),%eax
  4007be:	8d 48 01             	lea    0x1(%rax),%ecx
  4007c1:	48 8b 15 38 08 20 00 	mov    0x200838(%rip),%rdx        # 601000 <exit+0x20061f>
  4007c8:	89 0a                	mov    %ecx,(%rdx)
  4007ca:	48 8b 0d 37 08 20 00 	mov    0x200837(%rip),%rcx        # 601008 <exit+0x200627>
  4007d1:	48 63 d0             	movslq %eax,%rdx
  4007d4:	0f b6 45 a7          	movzbl -0x59(%rbp),%eax
  4007d8:	88 04 11             	mov    %al,(%rcx,%rdx,1)
  4007db:	eb 35                	jmp    400812 <printf+0x363>
			}
		}
		else
		{

			screen[screen_ctr++] = *format;
  4007dd:	48 8b 05 1c 08 20 00 	mov    0x20081c(%rip),%rax        # 601000 <exit+0x20061f>
  4007e4:	8b 00                	mov    (%rax),%eax
  4007e6:	8d 48 01             	lea    0x1(%rax),%ecx
  4007e9:	48 8b 15 10 08 20 00 	mov    0x200810(%rip),%rdx        # 601000 <exit+0x20061f>
  4007f0:	89 0a                	mov    %ecx,(%rdx)
  4007f2:	48 8b 95 78 ff ff ff 	mov    -0x88(%rbp),%rdx
  4007f9:	0f b6 12             	movzbl (%rdx),%edx
  4007fc:	48 8b 0d 05 08 20 00 	mov    0x200805(%rip),%rcx        # 601008 <exit+0x200627>
  400803:	48 98                	cltq   
  400805:	88 14 01             	mov    %dl,(%rcx,%rax,1)
			++printed;
  400808:	ff 45 cc             	incl   -0x34(%rbp)
			++format;
  40080b:	48 ff 85 78 ff ff ff 	incq   -0x88(%rbp)
	va_list val;
	int printed = 0;
	screen_ctr=0;
	va_start(val, format);

	while(*format)
  400812:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  400819:	0f b6 00             	movzbl (%rax),%eax
  40081c:	84 c0                	test   %al,%al
  40081e:	0f 85 e1 fc ff ff    	jne    400505 <printf+0x56>
			++printed;
			++format;
		}
	}

	printed = write(1,screen, screen_ctr);
  400824:	48 8b 05 d5 07 20 00 	mov    0x2007d5(%rip),%rax        # 601000 <exit+0x20061f>
  40082b:	8b 00                	mov    (%rax),%eax
  40082d:	48 98                	cltq   
  40082f:	48 89 c2             	mov    %rax,%rdx
  400832:	48 8b 05 cf 07 20 00 	mov    0x2007cf(%rip),%rax        # 601008 <exit+0x200627>
  400839:	48 89 c6             	mov    %rax,%rsi
  40083c:	bf 01 00 00 00       	mov    $0x1,%edi
  400841:	e8 52 00 00 00       	callq  400898 <write>
  400846:	89 45 cc             	mov    %eax,-0x34(%rbp)
	if(printed < 0)
  400849:	83 7d cc 00          	cmpl   $0x0,-0x34(%rbp)
  40084d:	79 07                	jns    400856 <printf+0x3a7>
		return -1;
  40084f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  400854:	eb 09                	jmp    40085f <printf+0x3b0>
	return screen_ctr;
  400856:	48 8b 05 a3 07 20 00 	mov    0x2007a3(%rip),%rax        # 601000 <exit+0x20061f>
  40085d:	8b 00                	mov    (%rax),%eax

}
  40085f:	c9                   	leaveq 
  400860:	c3                   	retq   

0000000000400861 <syscall_3>:
			"movq %%rax,%0;"
			:"=r"(ret):"m"(n),"m"(a1),"m"(a2));
	return ret;
}

static __inline uint64_t syscall_3(uint64_t n, uint64_t a1, uint64_t a2, uint64_t a3) {
  400861:	55                   	push   %rbp
  400862:	48 89 e5             	mov    %rsp,%rbp
  400865:	48 83 ec 30          	sub    $0x30,%rsp
  400869:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  40086d:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  400871:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  400875:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)

	uint64_t ret;
    
	__asm__("movq %1,%%rax;"
  400879:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40087d:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
  400881:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  400885:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  400889:	cd 80                	int    $0x80
  40088b:	48 89 c0             	mov    %rax,%rax
  40088e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
			"movq %3, %%rsi;"
			"movq %4, %%rdx;"
			"int $0x80;"
			"movq %%rax,%0;"
			:"=r"(ret):"m"(n),"m"(a1),"m"(a2),"m"(a3));
	return ret;
  400892:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
  400896:	c9                   	leaveq 
  400897:	c3                   	retq   

0000000000400898 <write>:
#include <stdlib.h>
#include <stdio.h>
#include <errno.h>


ssize_t write(int fd, const void *buf, size_t count){
  400898:	55                   	push   %rbp
  400899:	48 89 e5             	mov    %rsp,%rbp
  40089c:	48 83 ec 28          	sub    $0x28,%rsp
  4008a0:	89 7d ec             	mov    %edi,-0x14(%rbp)
  4008a3:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  4008a7:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)

	int retvalue=syscall_3(SYS_write,fd,(uint64_t)buf,(uint64_t)count);
  4008ab:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  4008af:	8b 45 ec             	mov    -0x14(%rbp),%eax
  4008b2:	48 98                	cltq   
  4008b4:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  4008b8:	48 89 c6             	mov    %rax,%rsi
  4008bb:	bf 01 00 00 00       	mov    $0x1,%edi
  4008c0:	e8 9c ff ff ff       	callq  400861 <syscall_3>
  4008c5:	89 45 fc             	mov    %eax,-0x4(%rbp)
	if(retvalue >=0){
  4008c8:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  4008cc:	78 07                	js     4008d5 <write+0x3d>
		return retvalue;
  4008ce:	8b 45 fc             	mov    -0x4(%rbp),%eax
  4008d1:	48 98                	cltq   
  4008d3:	eb 07                	jmp    4008dc <write+0x44>
	}
	return -1;
  4008d5:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
}
  4008dc:	c9                   	leaveq 
  4008dd:	c3                   	retq   

00000000004008de <syscall_3>:
			"movq %%rax,%0;"
			:"=r"(ret):"m"(n),"m"(a1),"m"(a2));
	return ret;
}

static __inline uint64_t syscall_3(uint64_t n, uint64_t a1, uint64_t a2, uint64_t a3) {
  4008de:	55                   	push   %rbp
  4008df:	48 89 e5             	mov    %rsp,%rbp
  4008e2:	48 83 ec 30          	sub    $0x30,%rsp
  4008e6:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  4008ea:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  4008ee:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  4008f2:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)

	uint64_t ret;
    
	__asm__("movq %1,%%rax;"
  4008f6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4008fa:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
  4008fe:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  400902:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  400906:	cd 80                	int    $0x80
  400908:	48 89 c0             	mov    %rax,%rax
  40090b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
			"movq %3, %%rsi;"
			"movq %4, %%rdx;"
			"int $0x80;"
			"movq %%rax,%0;"
			:"=r"(ret):"m"(n),"m"(a1),"m"(a2),"m"(a3));
	return ret;
  40090f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
  400913:	c9                   	leaveq 
  400914:	c3                   	retq   

0000000000400915 <execve>:
#include<sys/syscall.h>
#include<syscall.h>
#include<stdlib.h>

int execve(const char *filename, char *const argv[], char *const envp[])
{
  400915:	55                   	push   %rbp
  400916:	48 89 e5             	mov    %rsp,%rbp
  400919:	48 83 ec 28          	sub    $0x28,%rsp
  40091d:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  400921:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  400925:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
		int retvalue;
		retvalue = syscall_3(SYS_execve, (uint64_t)filename, (uint64_t)argv, (uint64_t)envp);
  400929:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  40092d:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  400931:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  400935:	48 89 c6             	mov    %rax,%rsi
  400938:	bf 3b 00 00 00       	mov    $0x3b,%edi
  40093d:	e8 9c ff ff ff       	callq  4008de <syscall_3>
  400942:	89 45 fc             	mov    %eax,-0x4(%rbp)
		if(retvalue >=0){
  400945:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  400949:	78 05                	js     400950 <execve+0x3b>
			return retvalue;
  40094b:	8b 45 fc             	mov    -0x4(%rbp),%eax
  40094e:	eb 05                	jmp    400955 <execve+0x40>
		}
		return -1;
  400950:	b8 ff ff ff ff       	mov    $0xffffffff,%eax

}
  400955:	c9                   	leaveq 
  400956:	c3                   	retq   

0000000000400957 <syscall_0>:
#define _SYSCALL_H

#include <sys/defs.h>
#include <sys/syscall.h>

static __inline uint64_t syscall_0(uint64_t n) {
  400957:	55                   	push   %rbp
  400958:	48 89 e5             	mov    %rsp,%rbp
  40095b:	48 83 ec 18          	sub    $0x18,%rsp
  40095f:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)

	uint64_t ret;
	__asm__("movq %1,%%rax;"
  400963:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  400967:	cd 80                	int    $0x80
  400969:	48 89 c0             	mov    %rax,%rax
  40096c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
			"int $0x80;"
			"movq %%rax,%0;"
			:"=r"(ret):"m"(n));

	return ret;
  400970:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
  400974:	c9                   	leaveq 
  400975:	c3                   	retq   

0000000000400976 <fork>:
#include <stdio.h>
#include <errno.h>


pid_t fork()
{
  400976:	55                   	push   %rbp
  400977:	48 89 e5             	mov    %rsp,%rbp
  40097a:	48 83 ec 10          	sub    $0x10,%rsp
	int retvalue;

	retvalue = syscall_0(SYS_fork);
  40097e:	bf 39 00 00 00       	mov    $0x39,%edi
  400983:	e8 cf ff ff ff       	callq  400957 <syscall_0>
  400988:	89 45 fc             	mov    %eax,-0x4(%rbp)

	if(retvalue >=0){
  40098b:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  40098f:	78 05                	js     400996 <fork+0x20>
		return retvalue;
  400991:	8b 45 fc             	mov    -0x4(%rbp),%eax
  400994:	eb 05                	jmp    40099b <fork+0x25>
	}
	return -1;
  400996:	b8 ff ff ff ff       	mov    $0xffffffff,%eax

}
  40099b:	c9                   	leaveq 
  40099c:	c3                   	retq   

000000000040099d <syscall_1>:

static __inline int64_t syscall_1(uint64_t n, uint64_t a1) {
  40099d:	55                   	push   %rbp
  40099e:	48 89 e5             	mov    %rsp,%rbp
  4009a1:	48 83 ec 20          	sub    $0x20,%rsp
  4009a5:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  4009a9:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)

	int64_t ret;

	__asm__("movq $78,%r15");
  4009ad:	49 c7 c7 4e 00 00 00 	mov    $0x4e,%r15
	//__asm__("movq %0,%%rax;"
	//		::"m"(n));

	//while(1);

	if(n==60){
  4009b4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4009b8:	48 83 f8 3c          	cmp    $0x3c,%rax
  4009bc:	75 0c                	jne    4009ca <syscall_1+0x2d>
		__asm__("movq %0,%%rax;"
  4009be:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4009c2:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
  4009c6:	cd 80                	int    $0x80
  4009c8:	eb 11                	jmp    4009db <syscall_1+0x3e>

		//while(1);
	}
	else{

		__asm__("movq %1,%%rax;"
  4009ca:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4009ce:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
  4009d2:	cd 80                	int    $0x80
  4009d4:	48 89 c0             	mov    %rax,%rax
  4009d7:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
				"movq %2,%%rdi;"
				"int $0x80;"
				"movq %%rax,%0;"
				:"=r"(ret):"m"(n),"m"(a1));
	}
	return ret;
  4009db:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
  4009df:	c9                   	leaveq 
  4009e0:	c3                   	retq   

00000000004009e1 <exit>:
#include <sys/defs.h>
#include <syscall.h>
#include <stdlib.h>
#include <sys/syscall.h>

void exit(int status){
  4009e1:	55                   	push   %rbp
  4009e2:	48 89 e5             	mov    %rsp,%rbp
  4009e5:	48 83 ec 08          	sub    $0x8,%rsp
  4009e9:	89 7d fc             	mov    %edi,-0x4(%rbp)

	syscall_1(SYS_exit,44);
  4009ec:	be 2c 00 00 00       	mov    $0x2c,%esi
  4009f1:	bf 3c 00 00 00       	mov    $0x3c,%edi
  4009f6:	e8 a2 ff ff ff       	callq  40099d <syscall_1>


}
  4009fb:	c9                   	leaveq 
  4009fc:	c3                   	retq   
