
rootfs/bin/hello:     file format elf64-x86-64


Disassembly of section .text:

00000000004000f0 <_start>:
#include <stdlib.h>

int main(int argc, char* argv[], char* envp[]);

void _start(void) {
  4000f0:	48 83 ec 08          	sub    $0x8,%rsp
//	int argc = 1;
//	char* argv[0];
//	char* envp[0];
	int res;
	res = main(0, NULL, NULL);
  4000f4:	ba 00 00 00 00       	mov    $0x0,%edx
  4000f9:	be 00 00 00 00       	mov    $0x0,%esi
  4000fe:	bf 00 00 00 00       	mov    $0x0,%edi
  400103:	e8 0c 00 00 00       	callq  400114 <main>
   
	exit(res);
  400108:	89 c7                	mov    %eax,%edi
  40010a:	e8 eb 03 00 00       	callq  4004fa <exit>
}
  40010f:	48 83 c4 08          	add    $0x8,%rsp
  400113:	c3                   	retq   

0000000000400114 <main>:
#include <stdio.h>

int k;
int main (int argc, char* argv[], char* envp[])
{
  400114:	48 83 ec 08          	sub    $0x8,%rsp
    int a,c=0;
    a=1;
    k=9+a;
  400118:	48 8b 05 51 05 20 00 	mov    0x200551(%rip),%rax        # 600670 <getcwd+0x20014a>
  40011f:	c7 00 0a 00 00 00    	movl   $0xa,(%rax)
    __asm__("movq $12,%r13;"
  400125:	49 c7 c5 0c 00 00 00 	mov    $0xc,%r13
  40012c:	49 c7 c6 0f 00 00 00 	mov    $0xf,%r14
    		"movq $15,%r14;");
    //while(1);
    printf("\nHi this is santosh %d",a);
  400133:	be 01 00 00 00       	mov    $0x1,%esi
  400138:	48 8d 3d 2e 04 00 00 	lea    0x42e(%rip),%rdi        # 40056d <getcwd+0x47>
  40013f:	b8 00 00 00 00       	mov    $0x0,%eax
  400144:	e8 c2 00 00 00       	callq  40020b <printf>
    return k+c;
  400149:	48 8b 05 20 05 20 00 	mov    0x200520(%rip),%rax        # 600670 <getcwd+0x20014a>
  400150:	8b 00                	mov    (%rax),%eax

}
  400152:	48 83 c4 08          	add    $0x8,%rsp
  400156:	c3                   	retq   
  400157:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  40015e:	00 00 

0000000000400160 <print_num>:

// update errno.
char screen[1024];
int screen_ctr;
void print_num(int num, int base)
{
  400160:	48 83 c4 80          	add    $0xffffffffffffff80,%rsp
	int number[32];
	int i=0;

	if(base == 16)
  400164:	83 fe 10             	cmp    $0x10,%esi
  400167:	75 27                	jne    400190 <print_num+0x30>
	{
		screen[screen_ctr++] = '0';
  400169:	48 8b 0d f0 04 20 00 	mov    0x2004f0(%rip),%rcx        # 600660 <getcwd+0x20013a>
  400170:	8b 01                	mov    (%rcx),%eax
  400172:	48 8b 15 ef 04 20 00 	mov    0x2004ef(%rip),%rdx        # 600668 <getcwd+0x200142>
  400179:	4c 63 c0             	movslq %eax,%r8
  40017c:	42 c6 04 02 30       	movb   $0x30,(%rdx,%r8,1)
		screen[screen_ctr++] = 'x';
  400181:	44 8d 40 02          	lea    0x2(%rax),%r8d
  400185:	44 89 01             	mov    %r8d,(%rcx)
	int number[32];
	int i=0;

	if(base == 16)
	{
		screen[screen_ctr++] = '0';
  400188:	ff c0                	inc    %eax
		screen[screen_ctr++] = 'x';
  40018a:	48 98                	cltq   
  40018c:	c6 04 02 78          	movb   $0x78,(%rdx,%rax,1)
  400190:	49 89 e0             	mov    %rsp,%r8

// update errno.
char screen[1024];
int screen_ctr;
void print_num(int num, int base)
{
  400193:	b9 00 00 00 00       	mov    $0x0,%ecx
		screen[screen_ctr++] = '0';
		screen[screen_ctr++] = 'x';
	}
	do
	{
		int rem=num%base;
  400198:	89 f8                	mov    %edi,%eax
  40019a:	99                   	cltd   
  40019b:	f7 fe                	idiv   %esi
		if((rem) >= 10)
		{

			rem = rem-10 + 'a';
  40019d:	8d 42 57             	lea    0x57(%rdx),%eax
  4001a0:	44 8d 4a 30          	lea    0x30(%rdx),%r9d
  4001a4:	83 fa 0a             	cmp    $0xa,%edx
  4001a7:	41 0f 4c c1          	cmovl  %r9d,%eax
		}
		else{
			rem = rem + '0';
		}
		number[i]= rem;
  4001ab:	41 89 00             	mov    %eax,(%r8)
		i++;
  4001ae:	44 8d 49 01          	lea    0x1(%rcx),%r9d
	}while((num=num/base) !=0);
  4001b2:	89 f8                	mov    %edi,%eax
  4001b4:	99                   	cltd   
  4001b5:	f7 fe                	idiv   %esi
  4001b7:	89 c7                	mov    %eax,%edi
  4001b9:	49 83 c0 04          	add    $0x4,%r8
  4001bd:	85 c0                	test   %eax,%eax
  4001bf:	74 05                	je     4001c6 <print_num+0x66>
		}
		else{
			rem = rem + '0';
		}
		number[i]= rem;
		i++;
  4001c1:	44 89 c9             	mov    %r9d,%ecx
  4001c4:	eb d2                	jmp    400198 <print_num+0x38>
  4001c6:	41 89 ca             	mov    %ecx,%r10d
	}while((num=num/base) !=0);


	while(i-- != 0)
  4001c9:	45 85 c9             	test   %r9d,%r9d
  4001cc:	74 38                	je     400206 <print_num+0xa6>
  4001ce:	48 8b 05 8b 04 20 00 	mov    0x20048b(%rip),%rax        # 600660 <getcwd+0x20013a>
  4001d5:	44 8b 00             	mov    (%rax),%r8d
  4001d8:	44 89 c0             	mov    %r8d,%eax
	{

		screen[screen_ctr++] = number[i];
  4001db:	48 8b 3d 86 04 20 00 	mov    0x200486(%rip),%rdi        # 600668 <getcwd+0x200142>
  4001e2:	48 63 d0             	movslq %eax,%rdx
  4001e5:	48 63 f1             	movslq %ecx,%rsi
  4001e8:	8b 34 b4             	mov    (%rsp,%rsi,4),%esi
  4001eb:	40 88 34 17          	mov    %sil,(%rdi,%rdx,1)
		number[i]= rem;
		i++;
	}while((num=num/base) !=0);


	while(i-- != 0)
  4001ef:	ff c9                	dec    %ecx
  4001f1:	ff c0                	inc    %eax
  4001f3:	83 f9 ff             	cmp    $0xffffffff,%ecx
  4001f6:	75 ea                	jne    4001e2 <print_num+0x82>
  4001f8:	43 8d 54 02 01       	lea    0x1(%r10,%r8,1),%edx
  4001fd:	48 8b 05 5c 04 20 00 	mov    0x20045c(%rip),%rax        # 600660 <getcwd+0x20013a>
  400204:	89 10                	mov    %edx,(%rax)
	{

		screen[screen_ctr++] = number[i];
	}
}
  400206:	48 83 ec 80          	sub    $0xffffffffffffff80,%rsp
  40020a:	c3                   	retq   

000000000040020b <printf>:

int printf(const char *format, ...) {
  40020b:	53                   	push   %rbx
  40020c:	48 83 ec 50          	sub    $0x50,%rsp
  400210:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
  400215:	48 89 54 24 30       	mov    %rdx,0x30(%rsp)
  40021a:	48 89 4c 24 38       	mov    %rcx,0x38(%rsp)
  40021f:	4c 89 44 24 40       	mov    %r8,0x40(%rsp)
  400224:	4c 89 4c 24 48       	mov    %r9,0x48(%rsp)
  400229:	48 89 fb             	mov    %rdi,%rbx
	va_list val;
	int printed = 0;
	screen_ctr=0;
  40022c:	48 8b 05 2d 04 20 00 	mov    0x20042d(%rip),%rax        # 600660 <getcwd+0x20013a>
  400233:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
	va_start(val, format);
  400239:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%rsp)
  400240:	00 
  400241:	48 8d 44 24 60       	lea    0x60(%rsp),%rax
  400246:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  40024b:	48 8d 44 24 20       	lea    0x20(%rsp),%rax
  400250:	48 89 44 24 18       	mov    %rax,0x18(%rsp)

	while(*format)
  400255:	e9 0b 02 00 00       	jmpq   400465 <printf+0x25a>
	{
		if(*format == '%')
  40025a:	3c 25                	cmp    $0x25,%al
  40025c:	0f 85 de 01 00 00    	jne    400440 <printf+0x235>
		{
			switch(*(++format))
  400262:	48 8d 53 01          	lea    0x1(%rbx),%rdx
  400266:	0f b6 43 01          	movzbl 0x1(%rbx),%eax
  40026a:	3c 64                	cmp    $0x64,%al
  40026c:	74 37                	je     4002a5 <printf+0x9a>
  40026e:	3c 64                	cmp    $0x64,%al
  400270:	7f 19                	jg     40028b <printf+0x80>
  400272:	3c 25                	cmp    $0x25,%al
  400274:	0f 84 a6 01 00 00    	je     400420 <printf+0x215>
  40027a:	3c 63                	cmp    $0x63,%al
  40027c:	0f 1f 40 00          	nopl   0x0(%rax)
  400280:	0f 84 88 00 00 00    	je     40030e <printf+0x103>
  400286:	e9 d7 01 00 00       	jmpq   400462 <printf+0x257>
  40028b:	3c 73                	cmp    $0x73,%al
  40028d:	0f 1f 00             	nopl   (%rax)
  400290:	0f 84 c4 00 00 00    	je     40035a <printf+0x14f>
  400296:	3c 78                	cmp    $0x78,%al
  400298:	0f 84 1c 01 00 00    	je     4003ba <printf+0x1af>
  40029e:	66 90                	xchg   %ax,%ax
  4002a0:	e9 bd 01 00 00       	jmpq   400462 <printf+0x257>
			{
			case 'd':
				printed=printed;
				int num = va_arg(val, int);
  4002a5:	8b 44 24 08          	mov    0x8(%rsp),%eax
  4002a9:	83 f8 30             	cmp    $0x30,%eax
  4002ac:	73 10                	jae    4002be <printf+0xb3>
  4002ae:	89 c2                	mov    %eax,%edx
  4002b0:	48 03 54 24 18       	add    0x18(%rsp),%rdx
  4002b5:	83 c0 08             	add    $0x8,%eax
  4002b8:	89 44 24 08          	mov    %eax,0x8(%rsp)
  4002bc:	eb 0e                	jmp    4002cc <printf+0xc1>
  4002be:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
  4002c3:	48 8d 42 08          	lea    0x8(%rdx),%rax
  4002c7:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  4002cc:	8b 3a                	mov    (%rdx),%edi
				if(num<0)
  4002ce:	85 ff                	test   %edi,%edi
  4002d0:	79 29                	jns    4002fb <printf+0xf0>
				{
					screen[screen_ctr++]='-';
  4002d2:	48 8b 15 87 03 20 00 	mov    0x200387(%rip),%rdx        # 600660 <getcwd+0x20013a>
  4002d9:	8b 02                	mov    (%rdx),%eax
  4002db:	8d 48 01             	lea    0x1(%rax),%ecx
  4002de:	89 0a                	mov    %ecx,(%rdx)
  4002e0:	48 98                	cltq   
  4002e2:	48 8b 15 7f 03 20 00 	mov    0x20037f(%rip),%rdx        # 600668 <getcwd+0x200142>
  4002e9:	c6 04 02 2d          	movb   $0x2d,(%rdx,%rax,1)
					print_num(-num,10);
  4002ed:	f7 df                	neg    %edi
  4002ef:	be 0a 00 00 00       	mov    $0xa,%esi
  4002f4:	e8 67 fe ff ff       	callq  400160 <print_num>
  4002f9:	eb 0a                	jmp    400305 <printf+0xfa>
				}
				else
					print_num(num,10);
  4002fb:	be 0a 00 00 00       	mov    $0xa,%esi
  400300:	e8 5b fe ff ff       	callq  400160 <print_num>
				format++;
  400305:	48 83 c3 02          	add    $0x2,%rbx
				continue;
  400309:	e9 57 01 00 00       	jmpq   400465 <printf+0x25a>

			case 'c':
				printed=printed;;
				int chr = va_arg(val, int);
  40030e:	8b 44 24 08          	mov    0x8(%rsp),%eax
  400312:	83 f8 30             	cmp    $0x30,%eax
  400315:	73 10                	jae    400327 <printf+0x11c>
  400317:	89 c2                	mov    %eax,%edx
  400319:	48 03 54 24 18       	add    0x18(%rsp),%rdx
  40031e:	83 c0 08             	add    $0x8,%eax
  400321:	89 44 24 08          	mov    %eax,0x8(%rsp)
  400325:	eb 0e                	jmp    400335 <printf+0x12a>
  400327:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
  40032c:	48 8d 42 08          	lea    0x8(%rdx),%rax
  400330:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  400335:	8b 0a                	mov    (%rdx),%ecx
				screen[screen_ctr++] = chr;
  400337:	48 8b 15 22 03 20 00 	mov    0x200322(%rip),%rdx        # 600660 <getcwd+0x20013a>
  40033e:	8b 02                	mov    (%rdx),%eax
  400340:	8d 70 01             	lea    0x1(%rax),%esi
  400343:	89 32                	mov    %esi,(%rdx)
  400345:	48 98                	cltq   
  400347:	48 8b 15 1a 03 20 00 	mov    0x20031a(%rip),%rdx        # 600668 <getcwd+0x200142>
  40034e:	88 0c 02             	mov    %cl,(%rdx,%rax,1)
				format++;
  400351:	48 83 c3 02          	add    $0x2,%rbx
				continue;
  400355:	e9 0b 01 00 00       	jmpq   400465 <printf+0x25a>

			case 's':
				printed=printed;
				char* str = va_arg(val, char*);
  40035a:	8b 44 24 08          	mov    0x8(%rsp),%eax
  40035e:	83 f8 30             	cmp    $0x30,%eax
  400361:	73 10                	jae    400373 <printf+0x168>
  400363:	89 c2                	mov    %eax,%edx
  400365:	48 03 54 24 18       	add    0x18(%rsp),%rdx
  40036a:	83 c0 08             	add    $0x8,%eax
  40036d:	89 44 24 08          	mov    %eax,0x8(%rsp)
  400371:	eb 0e                	jmp    400381 <printf+0x176>
  400373:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
  400378:	48 8d 42 08          	lea    0x8(%rdx),%rax
  40037c:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  400381:	48 8b 02             	mov    (%rdx),%rax
				while(*(str) != '\0')
  400384:	80 38 00             	cmpb   $0x0,(%rax)
  400387:	74 28                	je     4003b1 <printf+0x1a6>
					screen[screen_ctr++] = *str++;
  400389:	48 8b 0d d0 02 20 00 	mov    0x2002d0(%rip),%rcx        # 600660 <getcwd+0x20013a>
  400390:	48 8b 3d d1 02 20 00 	mov    0x2002d1(%rip),%rdi        # 600668 <getcwd+0x200142>
  400397:	8b 11                	mov    (%rcx),%edx
  400399:	8d 72 01             	lea    0x1(%rdx),%esi
  40039c:	89 31                	mov    %esi,(%rcx)
  40039e:	48 ff c0             	inc    %rax
  4003a1:	0f b6 70 ff          	movzbl -0x1(%rax),%esi
  4003a5:	48 63 d2             	movslq %edx,%rdx
  4003a8:	40 88 34 17          	mov    %sil,(%rdi,%rdx,1)
				continue;

			case 's':
				printed=printed;
				char* str = va_arg(val, char*);
				while(*(str) != '\0')
  4003ac:	80 38 00             	cmpb   $0x0,(%rax)
  4003af:	75 e6                	jne    400397 <printf+0x18c>
					screen[screen_ctr++] = *str++;
				format++;
  4003b1:	48 83 c3 02          	add    $0x2,%rbx
				continue;
  4003b5:	e9 ab 00 00 00       	jmpq   400465 <printf+0x25a>

			case 'x':
				printed=printed;
				int hex = va_arg(val, int);
  4003ba:	8b 44 24 08          	mov    0x8(%rsp),%eax
  4003be:	83 f8 30             	cmp    $0x30,%eax
  4003c1:	73 10                	jae    4003d3 <printf+0x1c8>
  4003c3:	89 c2                	mov    %eax,%edx
  4003c5:	48 03 54 24 18       	add    0x18(%rsp),%rdx
  4003ca:	83 c0 08             	add    $0x8,%eax
  4003cd:	89 44 24 08          	mov    %eax,0x8(%rsp)
  4003d1:	eb 0e                	jmp    4003e1 <printf+0x1d6>
  4003d3:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
  4003d8:	48 8d 42 08          	lea    0x8(%rdx),%rax
  4003dc:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  4003e1:	8b 3a                	mov    (%rdx),%edi
				if(hex<0)
  4003e3:	85 ff                	test   %edi,%edi
  4003e5:	79 29                	jns    400410 <printf+0x205>
				{
					screen[screen_ctr++]='-';
  4003e7:	48 8b 15 72 02 20 00 	mov    0x200272(%rip),%rdx        # 600660 <getcwd+0x20013a>
  4003ee:	8b 02                	mov    (%rdx),%eax
  4003f0:	8d 48 01             	lea    0x1(%rax),%ecx
  4003f3:	89 0a                	mov    %ecx,(%rdx)
  4003f5:	48 98                	cltq   
  4003f7:	48 8b 15 6a 02 20 00 	mov    0x20026a(%rip),%rdx        # 600668 <getcwd+0x200142>
  4003fe:	c6 04 02 2d          	movb   $0x2d,(%rdx,%rax,1)
					print_num(-hex,16);
  400402:	f7 df                	neg    %edi
  400404:	be 10 00 00 00       	mov    $0x10,%esi
  400409:	e8 52 fd ff ff       	callq  400160 <print_num>
  40040e:	eb 0a                	jmp    40041a <printf+0x20f>
				}
				else
					print_num(hex,16);
  400410:	be 10 00 00 00       	mov    $0x10,%esi
  400415:	e8 46 fd ff ff       	callq  400160 <print_num>

				format++;
  40041a:	48 83 c3 02          	add    $0x2,%rbx
				continue;
  40041e:	eb 45                	jmp    400465 <printf+0x25a>

			case '%':
				printed=printed;
				char c='%';

				screen[screen_ctr++] = c;
  400420:	48 8b 0d 39 02 20 00 	mov    0x200239(%rip),%rcx        # 600660 <getcwd+0x20013a>
  400427:	8b 01                	mov    (%rcx),%eax
  400429:	8d 70 01             	lea    0x1(%rax),%esi
  40042c:	89 31                	mov    %esi,(%rcx)
  40042e:	48 98                	cltq   
  400430:	48 8b 0d 31 02 20 00 	mov    0x200231(%rip),%rcx        # 600668 <getcwd+0x200142>
  400437:	c6 04 01 25          	movb   $0x25,(%rcx,%rax,1)

	while(*format)
	{
		if(*format == '%')
		{
			switch(*(++format))
  40043b:	48 89 d3             	mov    %rdx,%rbx
  40043e:	eb 25                	jmp    400465 <printf+0x25a>
			}
		}
		else
		{

			screen[screen_ctr++] = *format;
  400440:	48 8b 15 19 02 20 00 	mov    0x200219(%rip),%rdx        # 600660 <getcwd+0x20013a>
  400447:	8b 02                	mov    (%rdx),%eax
  400449:	8d 48 01             	lea    0x1(%rax),%ecx
  40044c:	89 0a                	mov    %ecx,(%rdx)
  40044e:	0f b6 0b             	movzbl (%rbx),%ecx
  400451:	48 98                	cltq   
  400453:	48 8b 15 0e 02 20 00 	mov    0x20020e(%rip),%rdx        # 600668 <getcwd+0x200142>
  40045a:	88 0c 02             	mov    %cl,(%rdx,%rax,1)
			++printed;
			++format;
  40045d:	48 ff c3             	inc    %rbx
  400460:	eb 03                	jmp    400465 <printf+0x25a>

	while(*format)
	{
		if(*format == '%')
		{
			switch(*(++format))
  400462:	48 89 d3             	mov    %rdx,%rbx
	va_list val;
	int printed = 0;
	screen_ctr=0;
	va_start(val, format);

	while(*format)
  400465:	0f b6 03             	movzbl (%rbx),%eax
  400468:	84 c0                	test   %al,%al
  40046a:	0f 85 ea fd ff ff    	jne    40025a <printf+0x4f>
			++printed;
			++format;
		}
	}

	printed = write(1,screen, screen_ctr);
  400470:	48 8b 05 e9 01 20 00 	mov    0x2001e9(%rip),%rax        # 600660 <getcwd+0x20013a>
  400477:	48 63 10             	movslq (%rax),%rdx
  40047a:	48 8b 35 e7 01 20 00 	mov    0x2001e7(%rip),%rsi        # 600668 <getcwd+0x200142>
  400481:	bf 01 00 00 00       	mov    $0x1,%edi
  400486:	e8 1a 00 00 00       	callq  4004a5 <write>
	if(printed < 0)
  40048b:	85 c0                	test   %eax,%eax
  40048d:	78 0b                	js     40049a <printf+0x28f>
		return -1;
	return screen_ctr;
  40048f:	48 8b 05 ca 01 20 00 	mov    0x2001ca(%rip),%rax        # 600660 <getcwd+0x20013a>
  400496:	8b 00                	mov    (%rax),%eax
  400498:	eb 05                	jmp    40049f <printf+0x294>
		}
	}

	printed = write(1,screen, screen_ctr);
	if(printed < 0)
		return -1;
  40049a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
	return screen_ctr;

}
  40049f:	48 83 c4 50          	add    $0x50,%rsp
  4004a3:	5b                   	pop    %rbx
  4004a4:	c3                   	retq   

00000000004004a5 <write>:
#include<sys/defs.h>
#include<sys/syscall.h>
#include<syscall.h>
#include<stdlib.h>

ssize_t write(int fd, const void *buf, size_t count){
  4004a5:	48 83 ec 20          	sub    $0x20,%rsp
  4004a9:	48 c7 04 24 01 00 00 	movq   $0x1,(%rsp)
  4004b0:	00 

	int retvalue=syscall_3(SYS_write,fd,(uint64_t)buf,(uint64_t)count);
  4004b1:	48 63 ff             	movslq %edi,%rdi
  4004b4:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  4004b9:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  4004be:	48 89 54 24 18       	mov    %rdx,0x18(%rsp)
}

static __inline uint64_t syscall_3(uint64_t n, uint64_t a1, uint64_t a2, uint64_t a3) {

	uint64_t ret;
	__asm__("movq %1,%%rax;"
  4004c3:	48 8b 04 24          	mov    (%rsp),%rax
  4004c7:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  4004cc:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
  4004d1:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
  4004d6:	cd 80                	int    $0x80
  4004d8:	48 89 c0             	mov    %rax,%rax
	if(retvalue >=0){
  4004db:	85 c0                	test   %eax,%eax
  4004dd:	78 04                	js     4004e3 <write+0x3e>
		return retvalue;
  4004df:	48 98                	cltq   
  4004e1:	eb 12                	jmp    4004f5 <write+0x50>
	}
	errno = -retvalue;
  4004e3:	f7 d8                	neg    %eax
  4004e5:	48 8d 15 b4 01 20 00 	lea    0x2001b4(%rip),%rdx        # 6006a0 <errno>
  4004ec:	89 02                	mov    %eax,(%rdx)
	return -1;
  4004ee:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
}
  4004f5:	48 83 c4 20          	add    $0x20,%rsp
  4004f9:	c3                   	retq   

00000000004004fa <exit>:
#include <sys/defs.h>
#include <syscall.h>
#include <stdlib.h>
#include <sys/syscall.h>

void exit(int status){
  4004fa:	48 83 ec 10          	sub    $0x10,%rsp
  4004fe:	48 c7 04 24 3c 00 00 	movq   $0x3c,(%rsp)
  400505:	00 
  400506:	48 c7 44 24 08 2c 00 	movq   $0x2c,0x8(%rsp)
  40050d:	00 00 

static __inline int64_t syscall_1(uint64_t n, uint64_t a1) {

	int64_t ret;

	__asm__("movq $78,%r15");
  40050f:	49 c7 c7 4e 00 00 00 	mov    $0x4e,%r15
	//		::"m"(n));

	//while(1);

	if(n==60){
		__asm__("movq %0,%%rax;"
  400516:	48 8b 04 24          	mov    (%rsp),%rax
  40051a:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  40051f:	cd 80                	int    $0x80

	syscall_1(SYS_exit,44);


}
  400521:	48 83 c4 10          	add    $0x10,%rsp
  400525:	c3                   	retq   

0000000000400526 <getcwd>:
#include<stdlib.h>
#include<errno.h>

int errno=0; //Only define here. declaration seeps through to the files via stdlib.h

char* getcwd(char *buf, size_t size){
  400526:	48 83 ec 20          	sub    $0x20,%rsp
  40052a:	48 c7 44 24 08 4f 00 	movq   $0x4f,0x8(%rsp)
  400531:	00 00 
  400533:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  400538:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
}

static __inline uint64_t syscall_2(uint64_t n, uint64_t a1, uint64_t a2) {

	uint64_t ret;
	__asm__("movq %1,%%rax;"
  40053d:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  400542:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  400547:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
  40054c:	cd 80                	int    $0x80
  40054e:	48 89 c2             	mov    %rax,%rdx

	int retvalue;
	retvalue=syscall_2(SYS_getcwd,(uint64_t)buf,(uint64_t)size);

	if(retvalue >=0){
		return buf;
  400551:	48 89 f8             	mov    %rdi,%rax
char* getcwd(char *buf, size_t size){

	int retvalue;
	retvalue=syscall_2(SYS_getcwd,(uint64_t)buf,(uint64_t)size);

	if(retvalue >=0){
  400554:	85 d2                	test   %edx,%edx
  400556:	79 10                	jns    400568 <getcwd+0x42>
		return buf;
	}
	errno = -retvalue;
  400558:	f7 da                	neg    %edx
  40055a:	48 8d 05 3f 01 20 00 	lea    0x20013f(%rip),%rax        # 6006a0 <errno>
  400561:	89 10                	mov    %edx,(%rax)
	return NULL;
  400563:	b8 00 00 00 00       	mov    $0x0,%eax

}
  400568:	48 83 c4 20          	add    $0x20,%rsp
  40056c:	c3                   	retq   
