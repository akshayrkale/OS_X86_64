
rootfs/bin/malluaunty:     file format elf64-x86-64


Disassembly of section .text:

00000000004000f0 <_start>:
#include <stdlib.h>
#include <stdio.h>
int main(int argc, char* argv[], char* envp[]);

void _start(void) {
  4000f0:	48 83 ec 08          	sub    $0x8,%rsp
//	int argc = 1;
//	char* argv[0];
//	char* envp[0];
	int res;
	res = main(0, NULL, NULL);
  4000f4:	ba 00 00 00 00       	mov    $0x0,%edx
  4000f9:	be 00 00 00 00       	mov    $0x0,%esi
  4000fe:	bf 00 00 00 00       	mov    $0x0,%edi
  400103:	e8 0c 00 00 00       	callq  400114 <main>
   
    exit(res);
  400108:	89 c7                	mov    %eax,%edi
  40010a:	e8 cb 03 00 00       	callq  4004da <exit>
  }
  40010f:	48 83 c4 08          	add    $0x8,%rsp
  400113:	c3                   	retq   

0000000000400114 <main>:
#include<stdio.h>
int main()
{
  400114:	48 83 ec 08          	sub    $0x8,%rsp
printf("In Malluaunty");
  400118:	48 8d 3d 2e 04 00 00 	lea    0x42e(%rip),%rdi        # 40054d <getcwd+0x47>
  40011f:	b8 00 00 00 00       	mov    $0x0,%eax
  400124:	e8 c2 00 00 00       	callq  4001eb <printf>
//while(1);
return 0;
}
  400129:	b8 00 00 00 00       	mov    $0x0,%eax
  40012e:	48 83 c4 08          	add    $0x8,%rsp
  400132:	c3                   	retq   
  400133:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  40013a:	00 00 00 
  40013d:	0f 1f 00             	nopl   (%rax)

0000000000400140 <print_num>:

// update errno.
char screen[1024];
int screen_ctr;
void print_num(int num, int base)
{
  400140:	48 83 c4 80          	add    $0xffffffffffffff80,%rsp
	int number[32];
	int i=0;

	if(base == 16)
  400144:	83 fe 10             	cmp    $0x10,%esi
  400147:	75 27                	jne    400170 <print_num+0x30>
	{
		screen[screen_ctr++] = '0';
  400149:	48 8b 0d e8 04 20 00 	mov    0x2004e8(%rip),%rcx        # 600638 <getcwd+0x200132>
  400150:	8b 01                	mov    (%rcx),%eax
  400152:	48 8b 15 e7 04 20 00 	mov    0x2004e7(%rip),%rdx        # 600640 <getcwd+0x20013a>
  400159:	4c 63 c0             	movslq %eax,%r8
  40015c:	42 c6 04 02 30       	movb   $0x30,(%rdx,%r8,1)
		screen[screen_ctr++] = 'x';
  400161:	44 8d 40 02          	lea    0x2(%rax),%r8d
  400165:	44 89 01             	mov    %r8d,(%rcx)
	int number[32];
	int i=0;

	if(base == 16)
	{
		screen[screen_ctr++] = '0';
  400168:	ff c0                	inc    %eax
		screen[screen_ctr++] = 'x';
  40016a:	48 98                	cltq   
  40016c:	c6 04 02 78          	movb   $0x78,(%rdx,%rax,1)
  400170:	49 89 e0             	mov    %rsp,%r8

// update errno.
char screen[1024];
int screen_ctr;
void print_num(int num, int base)
{
  400173:	b9 00 00 00 00       	mov    $0x0,%ecx
		screen[screen_ctr++] = '0';
		screen[screen_ctr++] = 'x';
	}
	do
	{
		int rem=num%base;
  400178:	89 f8                	mov    %edi,%eax
  40017a:	99                   	cltd   
  40017b:	f7 fe                	idiv   %esi
		if((rem) >= 10)
		{

			rem = rem-10 + 'a';
  40017d:	8d 42 57             	lea    0x57(%rdx),%eax
  400180:	44 8d 4a 30          	lea    0x30(%rdx),%r9d
  400184:	83 fa 0a             	cmp    $0xa,%edx
  400187:	41 0f 4c c1          	cmovl  %r9d,%eax
		}
		else{
			rem = rem + '0';
		}
		number[i]= rem;
  40018b:	41 89 00             	mov    %eax,(%r8)
		i++;
  40018e:	44 8d 49 01          	lea    0x1(%rcx),%r9d
	}while((num=num/base) !=0);
  400192:	89 f8                	mov    %edi,%eax
  400194:	99                   	cltd   
  400195:	f7 fe                	idiv   %esi
  400197:	89 c7                	mov    %eax,%edi
  400199:	49 83 c0 04          	add    $0x4,%r8
  40019d:	85 c0                	test   %eax,%eax
  40019f:	74 05                	je     4001a6 <print_num+0x66>
		}
		else{
			rem = rem + '0';
		}
		number[i]= rem;
		i++;
  4001a1:	44 89 c9             	mov    %r9d,%ecx
  4001a4:	eb d2                	jmp    400178 <print_num+0x38>
  4001a6:	41 89 ca             	mov    %ecx,%r10d
	}while((num=num/base) !=0);


	while(i-- != 0)
  4001a9:	45 85 c9             	test   %r9d,%r9d
  4001ac:	74 38                	je     4001e6 <print_num+0xa6>
  4001ae:	48 8b 05 83 04 20 00 	mov    0x200483(%rip),%rax        # 600638 <getcwd+0x200132>
  4001b5:	44 8b 00             	mov    (%rax),%r8d
  4001b8:	44 89 c0             	mov    %r8d,%eax
	{

		screen[screen_ctr++] = number[i];
  4001bb:	48 8b 3d 7e 04 20 00 	mov    0x20047e(%rip),%rdi        # 600640 <getcwd+0x20013a>
  4001c2:	48 63 d0             	movslq %eax,%rdx
  4001c5:	48 63 f1             	movslq %ecx,%rsi
  4001c8:	8b 34 b4             	mov    (%rsp,%rsi,4),%esi
  4001cb:	40 88 34 17          	mov    %sil,(%rdi,%rdx,1)
		number[i]= rem;
		i++;
	}while((num=num/base) !=0);


	while(i-- != 0)
  4001cf:	ff c9                	dec    %ecx
  4001d1:	ff c0                	inc    %eax
  4001d3:	83 f9 ff             	cmp    $0xffffffff,%ecx
  4001d6:	75 ea                	jne    4001c2 <print_num+0x82>
  4001d8:	43 8d 54 02 01       	lea    0x1(%r10,%r8,1),%edx
  4001dd:	48 8b 05 54 04 20 00 	mov    0x200454(%rip),%rax        # 600638 <getcwd+0x200132>
  4001e4:	89 10                	mov    %edx,(%rax)
	{

		screen[screen_ctr++] = number[i];
	}
}
  4001e6:	48 83 ec 80          	sub    $0xffffffffffffff80,%rsp
  4001ea:	c3                   	retq   

00000000004001eb <printf>:

int printf(const char *format, ...) {
  4001eb:	53                   	push   %rbx
  4001ec:	48 83 ec 50          	sub    $0x50,%rsp
  4001f0:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
  4001f5:	48 89 54 24 30       	mov    %rdx,0x30(%rsp)
  4001fa:	48 89 4c 24 38       	mov    %rcx,0x38(%rsp)
  4001ff:	4c 89 44 24 40       	mov    %r8,0x40(%rsp)
  400204:	4c 89 4c 24 48       	mov    %r9,0x48(%rsp)
  400209:	48 89 fb             	mov    %rdi,%rbx
	va_list val;
	int printed = 0;
	screen_ctr=0;
  40020c:	48 8b 05 25 04 20 00 	mov    0x200425(%rip),%rax        # 600638 <getcwd+0x200132>
  400213:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
	va_start(val, format);
  400219:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%rsp)
  400220:	00 
  400221:	48 8d 44 24 60       	lea    0x60(%rsp),%rax
  400226:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  40022b:	48 8d 44 24 20       	lea    0x20(%rsp),%rax
  400230:	48 89 44 24 18       	mov    %rax,0x18(%rsp)

	while(*format)
  400235:	e9 0b 02 00 00       	jmpq   400445 <printf+0x25a>
	{
		if(*format == '%')
  40023a:	3c 25                	cmp    $0x25,%al
  40023c:	0f 85 de 01 00 00    	jne    400420 <printf+0x235>
		{
			switch(*(++format))
  400242:	48 8d 53 01          	lea    0x1(%rbx),%rdx
  400246:	0f b6 43 01          	movzbl 0x1(%rbx),%eax
  40024a:	3c 64                	cmp    $0x64,%al
  40024c:	74 37                	je     400285 <printf+0x9a>
  40024e:	3c 64                	cmp    $0x64,%al
  400250:	7f 19                	jg     40026b <printf+0x80>
  400252:	3c 25                	cmp    $0x25,%al
  400254:	0f 84 a6 01 00 00    	je     400400 <printf+0x215>
  40025a:	3c 63                	cmp    $0x63,%al
  40025c:	0f 1f 40 00          	nopl   0x0(%rax)
  400260:	0f 84 88 00 00 00    	je     4002ee <printf+0x103>
  400266:	e9 d7 01 00 00       	jmpq   400442 <printf+0x257>
  40026b:	3c 73                	cmp    $0x73,%al
  40026d:	0f 1f 00             	nopl   (%rax)
  400270:	0f 84 c4 00 00 00    	je     40033a <printf+0x14f>
  400276:	3c 78                	cmp    $0x78,%al
  400278:	0f 84 1c 01 00 00    	je     40039a <printf+0x1af>
  40027e:	66 90                	xchg   %ax,%ax
  400280:	e9 bd 01 00 00       	jmpq   400442 <printf+0x257>
			{
			case 'd':
				printed=printed;
				int num = va_arg(val, int);
  400285:	8b 44 24 08          	mov    0x8(%rsp),%eax
  400289:	83 f8 30             	cmp    $0x30,%eax
  40028c:	73 10                	jae    40029e <printf+0xb3>
  40028e:	89 c2                	mov    %eax,%edx
  400290:	48 03 54 24 18       	add    0x18(%rsp),%rdx
  400295:	83 c0 08             	add    $0x8,%eax
  400298:	89 44 24 08          	mov    %eax,0x8(%rsp)
  40029c:	eb 0e                	jmp    4002ac <printf+0xc1>
  40029e:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
  4002a3:	48 8d 42 08          	lea    0x8(%rdx),%rax
  4002a7:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  4002ac:	8b 3a                	mov    (%rdx),%edi
				if(num<0)
  4002ae:	85 ff                	test   %edi,%edi
  4002b0:	79 29                	jns    4002db <printf+0xf0>
				{
					screen[screen_ctr++]='-';
  4002b2:	48 8b 15 7f 03 20 00 	mov    0x20037f(%rip),%rdx        # 600638 <getcwd+0x200132>
  4002b9:	8b 02                	mov    (%rdx),%eax
  4002bb:	8d 48 01             	lea    0x1(%rax),%ecx
  4002be:	89 0a                	mov    %ecx,(%rdx)
  4002c0:	48 98                	cltq   
  4002c2:	48 8b 15 77 03 20 00 	mov    0x200377(%rip),%rdx        # 600640 <getcwd+0x20013a>
  4002c9:	c6 04 02 2d          	movb   $0x2d,(%rdx,%rax,1)
					print_num(-num,10);
  4002cd:	f7 df                	neg    %edi
  4002cf:	be 0a 00 00 00       	mov    $0xa,%esi
  4002d4:	e8 67 fe ff ff       	callq  400140 <print_num>
  4002d9:	eb 0a                	jmp    4002e5 <printf+0xfa>
				}
				else
					print_num(num,10);
  4002db:	be 0a 00 00 00       	mov    $0xa,%esi
  4002e0:	e8 5b fe ff ff       	callq  400140 <print_num>
				format++;
  4002e5:	48 83 c3 02          	add    $0x2,%rbx
				continue;
  4002e9:	e9 57 01 00 00       	jmpq   400445 <printf+0x25a>

			case 'c':
				printed=printed;;
				int chr = va_arg(val, int);
  4002ee:	8b 44 24 08          	mov    0x8(%rsp),%eax
  4002f2:	83 f8 30             	cmp    $0x30,%eax
  4002f5:	73 10                	jae    400307 <printf+0x11c>
  4002f7:	89 c2                	mov    %eax,%edx
  4002f9:	48 03 54 24 18       	add    0x18(%rsp),%rdx
  4002fe:	83 c0 08             	add    $0x8,%eax
  400301:	89 44 24 08          	mov    %eax,0x8(%rsp)
  400305:	eb 0e                	jmp    400315 <printf+0x12a>
  400307:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
  40030c:	48 8d 42 08          	lea    0x8(%rdx),%rax
  400310:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  400315:	8b 0a                	mov    (%rdx),%ecx
				screen[screen_ctr++] = chr;
  400317:	48 8b 15 1a 03 20 00 	mov    0x20031a(%rip),%rdx        # 600638 <getcwd+0x200132>
  40031e:	8b 02                	mov    (%rdx),%eax
  400320:	8d 70 01             	lea    0x1(%rax),%esi
  400323:	89 32                	mov    %esi,(%rdx)
  400325:	48 98                	cltq   
  400327:	48 8b 15 12 03 20 00 	mov    0x200312(%rip),%rdx        # 600640 <getcwd+0x20013a>
  40032e:	88 0c 02             	mov    %cl,(%rdx,%rax,1)
				format++;
  400331:	48 83 c3 02          	add    $0x2,%rbx
				continue;
  400335:	e9 0b 01 00 00       	jmpq   400445 <printf+0x25a>

			case 's':
				printed=printed;
				char* str = va_arg(val, char*);
  40033a:	8b 44 24 08          	mov    0x8(%rsp),%eax
  40033e:	83 f8 30             	cmp    $0x30,%eax
  400341:	73 10                	jae    400353 <printf+0x168>
  400343:	89 c2                	mov    %eax,%edx
  400345:	48 03 54 24 18       	add    0x18(%rsp),%rdx
  40034a:	83 c0 08             	add    $0x8,%eax
  40034d:	89 44 24 08          	mov    %eax,0x8(%rsp)
  400351:	eb 0e                	jmp    400361 <printf+0x176>
  400353:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
  400358:	48 8d 42 08          	lea    0x8(%rdx),%rax
  40035c:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  400361:	48 8b 02             	mov    (%rdx),%rax
				while(*(str) != '\0')
  400364:	80 38 00             	cmpb   $0x0,(%rax)
  400367:	74 28                	je     400391 <printf+0x1a6>
					screen[screen_ctr++] = *str++;
  400369:	48 8b 0d c8 02 20 00 	mov    0x2002c8(%rip),%rcx        # 600638 <getcwd+0x200132>
  400370:	48 8b 3d c9 02 20 00 	mov    0x2002c9(%rip),%rdi        # 600640 <getcwd+0x20013a>
  400377:	8b 11                	mov    (%rcx),%edx
  400379:	8d 72 01             	lea    0x1(%rdx),%esi
  40037c:	89 31                	mov    %esi,(%rcx)
  40037e:	48 ff c0             	inc    %rax
  400381:	0f b6 70 ff          	movzbl -0x1(%rax),%esi
  400385:	48 63 d2             	movslq %edx,%rdx
  400388:	40 88 34 17          	mov    %sil,(%rdi,%rdx,1)
				continue;

			case 's':
				printed=printed;
				char* str = va_arg(val, char*);
				while(*(str) != '\0')
  40038c:	80 38 00             	cmpb   $0x0,(%rax)
  40038f:	75 e6                	jne    400377 <printf+0x18c>
					screen[screen_ctr++] = *str++;
				format++;
  400391:	48 83 c3 02          	add    $0x2,%rbx
				continue;
  400395:	e9 ab 00 00 00       	jmpq   400445 <printf+0x25a>

			case 'x':
				printed=printed;
				int hex = va_arg(val, int);
  40039a:	8b 44 24 08          	mov    0x8(%rsp),%eax
  40039e:	83 f8 30             	cmp    $0x30,%eax
  4003a1:	73 10                	jae    4003b3 <printf+0x1c8>
  4003a3:	89 c2                	mov    %eax,%edx
  4003a5:	48 03 54 24 18       	add    0x18(%rsp),%rdx
  4003aa:	83 c0 08             	add    $0x8,%eax
  4003ad:	89 44 24 08          	mov    %eax,0x8(%rsp)
  4003b1:	eb 0e                	jmp    4003c1 <printf+0x1d6>
  4003b3:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
  4003b8:	48 8d 42 08          	lea    0x8(%rdx),%rax
  4003bc:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  4003c1:	8b 3a                	mov    (%rdx),%edi
				if(hex<0)
  4003c3:	85 ff                	test   %edi,%edi
  4003c5:	79 29                	jns    4003f0 <printf+0x205>
				{
					screen[screen_ctr++]='-';
  4003c7:	48 8b 15 6a 02 20 00 	mov    0x20026a(%rip),%rdx        # 600638 <getcwd+0x200132>
  4003ce:	8b 02                	mov    (%rdx),%eax
  4003d0:	8d 48 01             	lea    0x1(%rax),%ecx
  4003d3:	89 0a                	mov    %ecx,(%rdx)
  4003d5:	48 98                	cltq   
  4003d7:	48 8b 15 62 02 20 00 	mov    0x200262(%rip),%rdx        # 600640 <getcwd+0x20013a>
  4003de:	c6 04 02 2d          	movb   $0x2d,(%rdx,%rax,1)
					print_num(-hex,16);
  4003e2:	f7 df                	neg    %edi
  4003e4:	be 10 00 00 00       	mov    $0x10,%esi
  4003e9:	e8 52 fd ff ff       	callq  400140 <print_num>
  4003ee:	eb 0a                	jmp    4003fa <printf+0x20f>
				}
				else
					print_num(hex,16);
  4003f0:	be 10 00 00 00       	mov    $0x10,%esi
  4003f5:	e8 46 fd ff ff       	callq  400140 <print_num>

				format++;
  4003fa:	48 83 c3 02          	add    $0x2,%rbx
				continue;
  4003fe:	eb 45                	jmp    400445 <printf+0x25a>

			case '%':
				printed=printed;
				char c='%';

				screen[screen_ctr++] = c;
  400400:	48 8b 0d 31 02 20 00 	mov    0x200231(%rip),%rcx        # 600638 <getcwd+0x200132>
  400407:	8b 01                	mov    (%rcx),%eax
  400409:	8d 70 01             	lea    0x1(%rax),%esi
  40040c:	89 31                	mov    %esi,(%rcx)
  40040e:	48 98                	cltq   
  400410:	48 8b 0d 29 02 20 00 	mov    0x200229(%rip),%rcx        # 600640 <getcwd+0x20013a>
  400417:	c6 04 01 25          	movb   $0x25,(%rcx,%rax,1)

	while(*format)
	{
		if(*format == '%')
		{
			switch(*(++format))
  40041b:	48 89 d3             	mov    %rdx,%rbx
  40041e:	eb 25                	jmp    400445 <printf+0x25a>
			}
		}
		else
		{

			screen[screen_ctr++] = *format;
  400420:	48 8b 15 11 02 20 00 	mov    0x200211(%rip),%rdx        # 600638 <getcwd+0x200132>
  400427:	8b 02                	mov    (%rdx),%eax
  400429:	8d 48 01             	lea    0x1(%rax),%ecx
  40042c:	89 0a                	mov    %ecx,(%rdx)
  40042e:	0f b6 0b             	movzbl (%rbx),%ecx
  400431:	48 98                	cltq   
  400433:	48 8b 15 06 02 20 00 	mov    0x200206(%rip),%rdx        # 600640 <getcwd+0x20013a>
  40043a:	88 0c 02             	mov    %cl,(%rdx,%rax,1)
			++printed;
			++format;
  40043d:	48 ff c3             	inc    %rbx
  400440:	eb 03                	jmp    400445 <printf+0x25a>

	while(*format)
	{
		if(*format == '%')
		{
			switch(*(++format))
  400442:	48 89 d3             	mov    %rdx,%rbx
	va_list val;
	int printed = 0;
	screen_ctr=0;
	va_start(val, format);

	while(*format)
  400445:	0f b6 03             	movzbl (%rbx),%eax
  400448:	84 c0                	test   %al,%al
  40044a:	0f 85 ea fd ff ff    	jne    40023a <printf+0x4f>
			++printed;
			++format;
		}
	}

	printed = write(1,screen, screen_ctr);
  400450:	48 8b 05 e1 01 20 00 	mov    0x2001e1(%rip),%rax        # 600638 <getcwd+0x200132>
  400457:	48 63 10             	movslq (%rax),%rdx
  40045a:	48 8b 35 df 01 20 00 	mov    0x2001df(%rip),%rsi        # 600640 <getcwd+0x20013a>
  400461:	bf 01 00 00 00       	mov    $0x1,%edi
  400466:	e8 1a 00 00 00       	callq  400485 <write>
	if(printed < 0)
  40046b:	85 c0                	test   %eax,%eax
  40046d:	78 0b                	js     40047a <printf+0x28f>
		return -1;
	return screen_ctr;
  40046f:	48 8b 05 c2 01 20 00 	mov    0x2001c2(%rip),%rax        # 600638 <getcwd+0x200132>
  400476:	8b 00                	mov    (%rax),%eax
  400478:	eb 05                	jmp    40047f <printf+0x294>
		}
	}

	printed = write(1,screen, screen_ctr);
	if(printed < 0)
		return -1;
  40047a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
	return screen_ctr;

}
  40047f:	48 83 c4 50          	add    $0x50,%rsp
  400483:	5b                   	pop    %rbx
  400484:	c3                   	retq   

0000000000400485 <write>:
#include<sys/defs.h>
#include<sys/syscall.h>
#include<syscall.h>
#include<stdlib.h>

ssize_t write(int fd, const void *buf, size_t count){
  400485:	48 83 ec 20          	sub    $0x20,%rsp
  400489:	48 c7 04 24 01 00 00 	movq   $0x1,(%rsp)
  400490:	00 

	int retvalue=syscall_3(SYS_write,fd,(uint64_t)buf,(uint64_t)count);
  400491:	48 63 ff             	movslq %edi,%rdi
  400494:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  400499:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  40049e:	48 89 54 24 18       	mov    %rdx,0x18(%rsp)
}

static __inline uint64_t syscall_3(uint64_t n, uint64_t a1, uint64_t a2, uint64_t a3) {

	uint64_t ret;
	__asm__("movq %1,%%rax;"
  4004a3:	48 8b 04 24          	mov    (%rsp),%rax
  4004a7:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  4004ac:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
  4004b1:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
  4004b6:	cd 80                	int    $0x80
  4004b8:	48 89 c0             	mov    %rax,%rax
	if(retvalue >=0){
  4004bb:	85 c0                	test   %eax,%eax
  4004bd:	78 04                	js     4004c3 <write+0x3e>
		return retvalue;
  4004bf:	48 98                	cltq   
  4004c1:	eb 12                	jmp    4004d5 <write+0x50>
	}
	errno = -retvalue;
  4004c3:	f7 d8                	neg    %eax
  4004c5:	48 8d 15 94 01 20 00 	lea    0x200194(%rip),%rdx        # 600660 <_edata>
  4004cc:	89 02                	mov    %eax,(%rdx)
	return -1;
  4004ce:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
}
  4004d5:	48 83 c4 20          	add    $0x20,%rsp
  4004d9:	c3                   	retq   

00000000004004da <exit>:
#include <sys/defs.h>
#include <syscall.h>
#include <stdlib.h>
#include <sys/syscall.h>

void exit(int status){
  4004da:	48 83 ec 10          	sub    $0x10,%rsp
  4004de:	48 c7 04 24 3c 00 00 	movq   $0x3c,(%rsp)
  4004e5:	00 
  4004e6:	48 c7 44 24 08 2c 00 	movq   $0x2c,0x8(%rsp)
  4004ed:	00 00 

static __inline int64_t syscall_1(uint64_t n, uint64_t a1) {

	int64_t ret;

	__asm__("movq $78,%r15");
  4004ef:	49 c7 c7 4e 00 00 00 	mov    $0x4e,%r15
	//		::"m"(n));

	//while(1);

	if(n==60){
		__asm__("movq %0,%%rax;"
  4004f6:	48 8b 04 24          	mov    (%rsp),%rax
  4004fa:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  4004ff:	cd 80                	int    $0x80

	syscall_1(SYS_exit,44);


}
  400501:	48 83 c4 10          	add    $0x10,%rsp
  400505:	c3                   	retq   

0000000000400506 <getcwd>:
#include<stdlib.h>
#include<errno.h>

int errno=0; //Only define here. declaration seeps through to the files via stdlib.h

char* getcwd(char *buf, size_t size){
  400506:	48 83 ec 20          	sub    $0x20,%rsp
  40050a:	48 c7 44 24 08 4f 00 	movq   $0x4f,0x8(%rsp)
  400511:	00 00 
  400513:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  400518:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
}

static __inline uint64_t syscall_2(uint64_t n, uint64_t a1, uint64_t a2) {

	uint64_t ret;
	__asm__("movq %1,%%rax;"
  40051d:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  400522:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  400527:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
  40052c:	cd 80                	int    $0x80
  40052e:	48 89 c2             	mov    %rax,%rdx

	int retvalue;
	retvalue=syscall_2(SYS_getcwd,(uint64_t)buf,(uint64_t)size);

	if(retvalue >=0){
		return buf;
  400531:	48 89 f8             	mov    %rdi,%rax
char* getcwd(char *buf, size_t size){

	int retvalue;
	retvalue=syscall_2(SYS_getcwd,(uint64_t)buf,(uint64_t)size);

	if(retvalue >=0){
  400534:	85 d2                	test   %edx,%edx
  400536:	79 10                	jns    400548 <getcwd+0x42>
		return buf;
	}
	errno = -retvalue;
  400538:	f7 da                	neg    %edx
  40053a:	48 8d 05 1f 01 20 00 	lea    0x20011f(%rip),%rax        # 600660 <_edata>
  400541:	89 10                	mov    %edx,(%rax)
	return NULL;
  400543:	b8 00 00 00 00       	mov    $0x0,%eax

}
  400548:	48 83 c4 20          	add    $0x20,%rsp
  40054c:	c3                   	retq   
