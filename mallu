
rootfs/bin/malluaunty:     file format elf64-x86-64


Disassembly of section .text:

00000000004000e8 <_start>:
#include <stdlib.h>
#include <stdio.h>
int main(int argc, char* argv[], char* envp[]);

void _start(void) {
  4000e8:	55                   	push   %rbp
  4000e9:	48 89 e5             	mov    %rsp,%rbp
  4000ec:	48 83 ec 10          	sub    $0x10,%rsp
//	int argc = 1;
//	char* argv[0];
//	char* envp[0];
	int res;
	res = main(0, NULL, NULL);
  4000f0:	ba 00 00 00 00       	mov    $0x0,%edx
  4000f5:	be 00 00 00 00       	mov    $0x0,%esi
  4000fa:	bf 00 00 00 00       	mov    $0x0,%edi
  4000ff:	e8 0f 00 00 00       	callq  400113 <main>
  400104:	89 45 fc             	mov    %eax,-0x4(%rbp)
   
    exit(res);
  400107:	8b 45 fc             	mov    -0x4(%rbp),%eax
  40010a:	89 c7                	mov    %eax,%edi
  40010c:	e8 9e 06 00 00       	callq  4007af <exit>
  }
  400111:	c9                   	leaveq 
  400112:	c3                   	retq   

0000000000400113 <main>:
#include <errno.h>
#include <string.h>


int main(int argc, char* argv[], char* envp[])
{
  400113:	55                   	push   %rbp
  400114:	48 89 e5             	mov    %rsp,%rbp
  400117:	48 83 ec 20          	sub    $0x20,%rsp
  40011b:	89 7d fc             	mov    %edi,-0x4(%rbp)
  40011e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  400122:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	//directroy_test_case();
	//sleep_test_case();

//	fork_test_case();

    printf("In Mallu");
  400126:	48 8d 3d 9e 06 00 00 	lea    0x69e(%rip),%rdi        # 4007cb <exit+0x1c>
  40012d:	b8 00 00 00 00       	mov    $0x0,%eax
  400132:	e8 05 02 00 00       	callq  40033c <printf>
	// }
	// char cmdLine[256];
	// read_line(0,cmdLine);
	// //printf("the command was given: %s",cmdLine);

return 0;
  400137:	b8 00 00 00 00       	mov    $0x0,%eax
}
  40013c:	c9                   	leaveq 
  40013d:	c3                   	retq   

000000000040013e <print_num>:

// update errno.
char screen[1024];
int screen_ctr;
void print_num(int num, int base)
{
  40013e:	55                   	push   %rbp
  40013f:	48 89 e5             	mov    %rsp,%rbp
  400142:	48 81 ec 98 00 00 00 	sub    $0x98,%rsp
  400149:	89 bd 6c ff ff ff    	mov    %edi,-0x94(%rbp)
  40014f:	89 b5 68 ff ff ff    	mov    %esi,-0x98(%rbp)
	int number[32];
	int i=0;
  400155:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)

	if(base == 16)
  40015c:	83 bd 68 ff ff ff 10 	cmpl   $0x10,-0x98(%rbp)
  400163:	75 44                	jne    4001a9 <print_num+0x6b>
	{
		screen[screen_ctr++] = '0';
  400165:	48 8b 05 a4 07 20 00 	mov    0x2007a4(%rip),%rax        # 600910 <exit+0x200161>
  40016c:	8b 00                	mov    (%rax),%eax
  40016e:	8d 48 01             	lea    0x1(%rax),%ecx
  400171:	48 8b 15 98 07 20 00 	mov    0x200798(%rip),%rdx        # 600910 <exit+0x200161>
  400178:	89 0a                	mov    %ecx,(%rdx)
  40017a:	48 8b 15 97 07 20 00 	mov    0x200797(%rip),%rdx        # 600918 <exit+0x200169>
  400181:	48 98                	cltq   
  400183:	c6 04 02 30          	movb   $0x30,(%rdx,%rax,1)
		screen[screen_ctr++] = 'x';
  400187:	48 8b 05 82 07 20 00 	mov    0x200782(%rip),%rax        # 600910 <exit+0x200161>
  40018e:	8b 00                	mov    (%rax),%eax
  400190:	8d 48 01             	lea    0x1(%rax),%ecx
  400193:	48 8b 15 76 07 20 00 	mov    0x200776(%rip),%rdx        # 600910 <exit+0x200161>
  40019a:	89 0a                	mov    %ecx,(%rdx)
  40019c:	48 8b 15 75 07 20 00 	mov    0x200775(%rip),%rdx        # 600918 <exit+0x200169>
  4001a3:	48 98                	cltq   
  4001a5:	c6 04 02 78          	movb   $0x78,(%rdx,%rax,1)
	}
	do
	{
		int rem=num%base;
  4001a9:	8b 85 6c ff ff ff    	mov    -0x94(%rbp),%eax
  4001af:	99                   	cltd   
  4001b0:	f7 bd 68 ff ff ff    	idivl  -0x98(%rbp)
  4001b6:	89 55 f8             	mov    %edx,-0x8(%rbp)
		if((rem) >= 10)
  4001b9:	83 7d f8 09          	cmpl   $0x9,-0x8(%rbp)
  4001bd:	7e 06                	jle    4001c5 <print_num+0x87>
		{

			rem = rem-10 + 'a';
  4001bf:	83 45 f8 57          	addl   $0x57,-0x8(%rbp)
  4001c3:	eb 04                	jmp    4001c9 <print_num+0x8b>
		}
		else{
			rem = rem + '0';
  4001c5:	83 45 f8 30          	addl   $0x30,-0x8(%rbp)
		}
		number[i]= rem;
  4001c9:	8b 45 fc             	mov    -0x4(%rbp),%eax
  4001cc:	48 98                	cltq   
  4001ce:	8b 55 f8             	mov    -0x8(%rbp),%edx
  4001d1:	89 94 85 78 ff ff ff 	mov    %edx,-0x88(%rbp,%rax,4)
		i++;
  4001d8:	ff 45 fc             	incl   -0x4(%rbp)
	}while((num=num/base) !=0);
  4001db:	8b 85 6c ff ff ff    	mov    -0x94(%rbp),%eax
  4001e1:	99                   	cltd   
  4001e2:	f7 bd 68 ff ff ff    	idivl  -0x98(%rbp)
  4001e8:	89 85 6c ff ff ff    	mov    %eax,-0x94(%rbp)
  4001ee:	83 bd 6c ff ff ff 00 	cmpl   $0x0,-0x94(%rbp)
  4001f5:	75 b2                	jne    4001a9 <print_num+0x6b>


	while(i-- != 0)
  4001f7:	eb 2e                	jmp    400227 <print_num+0xe9>
	{

		screen[screen_ctr++] = number[i];
  4001f9:	48 8b 05 10 07 20 00 	mov    0x200710(%rip),%rax        # 600910 <exit+0x200161>
  400200:	8b 00                	mov    (%rax),%eax
  400202:	8d 48 01             	lea    0x1(%rax),%ecx
  400205:	48 8b 15 04 07 20 00 	mov    0x200704(%rip),%rdx        # 600910 <exit+0x200161>
  40020c:	89 0a                	mov    %ecx,(%rdx)
  40020e:	8b 55 fc             	mov    -0x4(%rbp),%edx
  400211:	48 63 d2             	movslq %edx,%rdx
  400214:	8b 94 95 78 ff ff ff 	mov    -0x88(%rbp,%rdx,4),%edx
  40021b:	48 8b 0d f6 06 20 00 	mov    0x2006f6(%rip),%rcx        # 600918 <exit+0x200169>
  400222:	48 98                	cltq   
  400224:	88 14 01             	mov    %dl,(%rcx,%rax,1)
		number[i]= rem;
		i++;
	}while((num=num/base) !=0);


	while(i-- != 0)
  400227:	8b 45 fc             	mov    -0x4(%rbp),%eax
  40022a:	8d 50 ff             	lea    -0x1(%rax),%edx
  40022d:	89 55 fc             	mov    %edx,-0x4(%rbp)
  400230:	85 c0                	test   %eax,%eax
  400232:	75 c5                	jne    4001f9 <print_num+0xbb>
	{

		screen[screen_ctr++] = number[i];
	}
}
  400234:	c9                   	leaveq 
  400235:	c3                   	retq   

0000000000400236 <print_ptr>:



void print_ptr(long unsigned int num, long unsigned int base)
{
  400236:	55                   	push   %rbp
  400237:	48 89 e5             	mov    %rsp,%rbp
  40023a:	48 81 ec 20 01 00 00 	sub    $0x120,%rsp
  400241:	48 89 bd e8 fe ff ff 	mov    %rdi,-0x118(%rbp)
  400248:	48 89 b5 e0 fe ff ff 	mov    %rsi,-0x120(%rbp)
	long unsigned int number[32];
	int i=0;
  40024f:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)

		screen[screen_ctr++] = '0';
  400256:	48 8b 05 b3 06 20 00 	mov    0x2006b3(%rip),%rax        # 600910 <exit+0x200161>
  40025d:	8b 00                	mov    (%rax),%eax
  40025f:	8d 48 01             	lea    0x1(%rax),%ecx
  400262:	48 8b 15 a7 06 20 00 	mov    0x2006a7(%rip),%rdx        # 600910 <exit+0x200161>
  400269:	89 0a                	mov    %ecx,(%rdx)
  40026b:	48 8b 15 a6 06 20 00 	mov    0x2006a6(%rip),%rdx        # 600918 <exit+0x200169>
  400272:	48 98                	cltq   
  400274:	c6 04 02 30          	movb   $0x30,(%rdx,%rax,1)
		screen[screen_ctr++] = 'x';
  400278:	48 8b 05 91 06 20 00 	mov    0x200691(%rip),%rax        # 600910 <exit+0x200161>
  40027f:	8b 00                	mov    (%rax),%eax
  400281:	8d 48 01             	lea    0x1(%rax),%ecx
  400284:	48 8b 15 85 06 20 00 	mov    0x200685(%rip),%rdx        # 600910 <exit+0x200161>
  40028b:	89 0a                	mov    %ecx,(%rdx)
  40028d:	48 8b 15 84 06 20 00 	mov    0x200684(%rip),%rdx        # 600918 <exit+0x200169>
  400294:	48 98                	cltq   
  400296:	c6 04 02 78          	movb   $0x78,(%rdx,%rax,1)
	
	do
	{
		long unsigned int rem=num%base;
  40029a:	48 8b 85 e8 fe ff ff 	mov    -0x118(%rbp),%rax
  4002a1:	ba 00 00 00 00       	mov    $0x0,%edx
  4002a6:	48 f7 b5 e0 fe ff ff 	divq   -0x120(%rbp)
  4002ad:	48 89 55 f0          	mov    %rdx,-0x10(%rbp)
		if((rem) >= 10)
  4002b1:	48 83 7d f0 09       	cmpq   $0x9,-0x10(%rbp)
  4002b6:	76 07                	jbe    4002bf <print_ptr+0x89>
		{
			rem = rem-10 + 'a';
  4002b8:	48 83 45 f0 57       	addq   $0x57,-0x10(%rbp)
  4002bd:	eb 05                	jmp    4002c4 <print_ptr+0x8e>
		}
		else{
			rem = rem + '0';
  4002bf:	48 83 45 f0 30       	addq   $0x30,-0x10(%rbp)
		}
		number[i]= rem;
  4002c4:	8b 45 fc             	mov    -0x4(%rbp),%eax
  4002c7:	48 98                	cltq   
  4002c9:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  4002cd:	48 89 94 c5 f0 fe ff 	mov    %rdx,-0x110(%rbp,%rax,8)
  4002d4:	ff 
		i++;
  4002d5:	ff 45 fc             	incl   -0x4(%rbp)
	}while((num=num/base) !=0);
  4002d8:	48 8b 85 e8 fe ff ff 	mov    -0x118(%rbp),%rax
  4002df:	ba 00 00 00 00       	mov    $0x0,%edx
  4002e4:	48 f7 b5 e0 fe ff ff 	divq   -0x120(%rbp)
  4002eb:	48 89 85 e8 fe ff ff 	mov    %rax,-0x118(%rbp)
  4002f2:	48 83 bd e8 fe ff ff 	cmpq   $0x0,-0x118(%rbp)
  4002f9:	00 
  4002fa:	75 9e                	jne    40029a <print_ptr+0x64>


	while(i-- != 0)
  4002fc:	eb 2f                	jmp    40032d <print_ptr+0xf7>
	{

		screen[screen_ctr++] = number[i];
  4002fe:	48 8b 05 0b 06 20 00 	mov    0x20060b(%rip),%rax        # 600910 <exit+0x200161>
  400305:	8b 00                	mov    (%rax),%eax
  400307:	8d 48 01             	lea    0x1(%rax),%ecx
  40030a:	48 8b 15 ff 05 20 00 	mov    0x2005ff(%rip),%rdx        # 600910 <exit+0x200161>
  400311:	89 0a                	mov    %ecx,(%rdx)
  400313:	8b 55 fc             	mov    -0x4(%rbp),%edx
  400316:	48 63 d2             	movslq %edx,%rdx
  400319:	48 8b 94 d5 f0 fe ff 	mov    -0x110(%rbp,%rdx,8),%rdx
  400320:	ff 
  400321:	48 8b 0d f0 05 20 00 	mov    0x2005f0(%rip),%rcx        # 600918 <exit+0x200169>
  400328:	48 98                	cltq   
  40032a:	88 14 01             	mov    %dl,(%rcx,%rax,1)
		number[i]= rem;
		i++;
	}while((num=num/base) !=0);


	while(i-- != 0)
  40032d:	8b 45 fc             	mov    -0x4(%rbp),%eax
  400330:	8d 50 ff             	lea    -0x1(%rax),%edx
  400333:	89 55 fc             	mov    %edx,-0x4(%rbp)
  400336:	85 c0                	test   %eax,%eax
  400338:	75 c4                	jne    4002fe <print_ptr+0xc8>
	{

		screen[screen_ctr++] = number[i];
    }
}
  40033a:	c9                   	leaveq 
  40033b:	c3                   	retq   

000000000040033c <printf>:





int printf(const char *format, ...) {
  40033c:	55                   	push   %rbp
  40033d:	48 89 e5             	mov    %rsp,%rbp
  400340:	48 81 ec 90 00 00 00 	sub    $0x90,%rsp
  400347:	48 89 75 d8          	mov    %rsi,-0x28(%rbp)
  40034b:	48 89 55 e0          	mov    %rdx,-0x20(%rbp)
  40034f:	48 89 4d e8          	mov    %rcx,-0x18(%rbp)
  400353:	4c 89 45 f0          	mov    %r8,-0x10(%rbp)
  400357:	4c 89 4d f8          	mov    %r9,-0x8(%rbp)
  40035b:	48 89 bd 78 ff ff ff 	mov    %rdi,-0x88(%rbp)
	va_list val;
	int printed = 0;
  400362:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%rbp)
	screen_ctr=0;
  400369:	48 8b 05 a0 05 20 00 	mov    0x2005a0(%rip),%rax        # 600910 <exit+0x200161>
  400370:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
	va_start(val, format);
  400376:	c7 45 88 08 00 00 00 	movl   $0x8,-0x78(%rbp)
  40037d:	48 8d 45 10          	lea    0x10(%rbp),%rax
  400381:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  400385:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  400389:	48 89 45 98          	mov    %rax,-0x68(%rbp)

	while(*format)
  40038d:	e9 0d 03 00 00       	jmpq   40069f <printf+0x363>
	{
		if(*format == '%')
  400392:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  400399:	0f b6 00             	movzbl (%rax),%eax
  40039c:	3c 25                	cmp    $0x25,%al
  40039e:	0f 85 c6 02 00 00    	jne    40066a <printf+0x32e>
		{
			switch(*(++format))
  4003a4:	48 ff 85 78 ff ff ff 	incq   -0x88(%rbp)
  4003ab:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  4003b2:	0f b6 00             	movzbl (%rax),%eax
  4003b5:	0f be c0             	movsbl %al,%eax
  4003b8:	83 f8 64             	cmp    $0x64,%eax
  4003bb:	74 3c                	je     4003f9 <printf+0xbd>
  4003bd:	83 f8 64             	cmp    $0x64,%eax
  4003c0:	7f 17                	jg     4003d9 <printf+0x9d>
  4003c2:	83 f8 25             	cmp    $0x25,%eax
  4003c5:	0f 84 73 02 00 00    	je     40063e <printf+0x302>
  4003cb:	83 f8 63             	cmp    $0x63,%eax
  4003ce:	0f 84 ae 00 00 00    	je     400482 <printf+0x146>
  4003d4:	e9 c6 02 00 00       	jmpq   40069f <printf+0x363>
  4003d9:	83 f8 73             	cmp    $0x73,%eax
  4003dc:	0f 84 03 01 00 00    	je     4004e5 <printf+0x1a9>
  4003e2:	83 f8 78             	cmp    $0x78,%eax
  4003e5:	0f 84 7b 01 00 00    	je     400566 <printf+0x22a>
  4003eb:	83 f8 70             	cmp    $0x70,%eax
  4003ee:	0f 84 fb 01 00 00    	je     4005ef <printf+0x2b3>
  4003f4:	e9 a6 02 00 00       	jmpq   40069f <printf+0x363>
			{
			case 'd':
				printed=printed;
				int num = va_arg(val, int);
  4003f9:	8b 45 88             	mov    -0x78(%rbp),%eax
  4003fc:	83 f8 30             	cmp    $0x30,%eax
  4003ff:	73 17                	jae    400418 <printf+0xdc>
  400401:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  400405:	8b 45 88             	mov    -0x78(%rbp),%eax
  400408:	89 c0                	mov    %eax,%eax
  40040a:	48 01 d0             	add    %rdx,%rax
  40040d:	8b 55 88             	mov    -0x78(%rbp),%edx
  400410:	83 c2 08             	add    $0x8,%edx
  400413:	89 55 88             	mov    %edx,-0x78(%rbp)
  400416:	eb 0f                	jmp    400427 <printf+0xeb>
  400418:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  40041c:	48 89 d0             	mov    %rdx,%rax
  40041f:	48 83 c2 08          	add    $0x8,%rdx
  400423:	48 89 55 90          	mov    %rdx,-0x70(%rbp)
  400427:	8b 00                	mov    (%rax),%eax
  400429:	89 45 bc             	mov    %eax,-0x44(%rbp)
				if(num<0)
  40042c:	83 7d bc 00          	cmpl   $0x0,-0x44(%rbp)
  400430:	79 35                	jns    400467 <printf+0x12b>
				{
					screen[screen_ctr++]='-';
  400432:	48 8b 05 d7 04 20 00 	mov    0x2004d7(%rip),%rax        # 600910 <exit+0x200161>
  400439:	8b 00                	mov    (%rax),%eax
  40043b:	8d 48 01             	lea    0x1(%rax),%ecx
  40043e:	48 8b 15 cb 04 20 00 	mov    0x2004cb(%rip),%rdx        # 600910 <exit+0x200161>
  400445:	89 0a                	mov    %ecx,(%rdx)
  400447:	48 8b 15 ca 04 20 00 	mov    0x2004ca(%rip),%rdx        # 600918 <exit+0x200169>
  40044e:	48 98                	cltq   
  400450:	c6 04 02 2d          	movb   $0x2d,(%rdx,%rax,1)
					print_num(-num,10);
  400454:	8b 45 bc             	mov    -0x44(%rbp),%eax
  400457:	f7 d8                	neg    %eax
  400459:	be 0a 00 00 00       	mov    $0xa,%esi
  40045e:	89 c7                	mov    %eax,%edi
  400460:	e8 d9 fc ff ff       	callq  40013e <print_num>
  400465:	eb 0f                	jmp    400476 <printf+0x13a>
				}
				else
					print_num(num,10);
  400467:	8b 45 bc             	mov    -0x44(%rbp),%eax
  40046a:	be 0a 00 00 00       	mov    $0xa,%esi
  40046f:	89 c7                	mov    %eax,%edi
  400471:	e8 c8 fc ff ff       	callq  40013e <print_num>
				format++;
  400476:	48 ff 85 78 ff ff ff 	incq   -0x88(%rbp)
				continue;
  40047d:	e9 1d 02 00 00       	jmpq   40069f <printf+0x363>

			case 'c':
				printed=printed;;
				int chr = va_arg(val, int);
  400482:	8b 45 88             	mov    -0x78(%rbp),%eax
  400485:	83 f8 30             	cmp    $0x30,%eax
  400488:	73 17                	jae    4004a1 <printf+0x165>
  40048a:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  40048e:	8b 45 88             	mov    -0x78(%rbp),%eax
  400491:	89 c0                	mov    %eax,%eax
  400493:	48 01 d0             	add    %rdx,%rax
  400496:	8b 55 88             	mov    -0x78(%rbp),%edx
  400499:	83 c2 08             	add    $0x8,%edx
  40049c:	89 55 88             	mov    %edx,-0x78(%rbp)
  40049f:	eb 0f                	jmp    4004b0 <printf+0x174>
  4004a1:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  4004a5:	48 89 d0             	mov    %rdx,%rax
  4004a8:	48 83 c2 08          	add    $0x8,%rdx
  4004ac:	48 89 55 90          	mov    %rdx,-0x70(%rbp)
  4004b0:	8b 00                	mov    (%rax),%eax
  4004b2:	89 45 b8             	mov    %eax,-0x48(%rbp)
				screen[screen_ctr++] = chr;
  4004b5:	48 8b 05 54 04 20 00 	mov    0x200454(%rip),%rax        # 600910 <exit+0x200161>
  4004bc:	8b 00                	mov    (%rax),%eax
  4004be:	8d 48 01             	lea    0x1(%rax),%ecx
  4004c1:	48 8b 15 48 04 20 00 	mov    0x200448(%rip),%rdx        # 600910 <exit+0x200161>
  4004c8:	89 0a                	mov    %ecx,(%rdx)
  4004ca:	8b 55 b8             	mov    -0x48(%rbp),%edx
  4004cd:	48 8b 0d 44 04 20 00 	mov    0x200444(%rip),%rcx        # 600918 <exit+0x200169>
  4004d4:	48 98                	cltq   
  4004d6:	88 14 01             	mov    %dl,(%rcx,%rax,1)
				format++;
  4004d9:	48 ff 85 78 ff ff ff 	incq   -0x88(%rbp)
				continue;
  4004e0:	e9 ba 01 00 00       	jmpq   40069f <printf+0x363>

			case 's':
				printed=printed;
				char* str = va_arg(val, char*);
  4004e5:	8b 45 88             	mov    -0x78(%rbp),%eax
  4004e8:	83 f8 30             	cmp    $0x30,%eax
  4004eb:	73 17                	jae    400504 <printf+0x1c8>
  4004ed:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  4004f1:	8b 45 88             	mov    -0x78(%rbp),%eax
  4004f4:	89 c0                	mov    %eax,%eax
  4004f6:	48 01 d0             	add    %rdx,%rax
  4004f9:	8b 55 88             	mov    -0x78(%rbp),%edx
  4004fc:	83 c2 08             	add    $0x8,%edx
  4004ff:	89 55 88             	mov    %edx,-0x78(%rbp)
  400502:	eb 0f                	jmp    400513 <printf+0x1d7>
  400504:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  400508:	48 89 d0             	mov    %rdx,%rax
  40050b:	48 83 c2 08          	add    $0x8,%rdx
  40050f:	48 89 55 90          	mov    %rdx,-0x70(%rbp)
  400513:	48 8b 00             	mov    (%rax),%rax
  400516:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
				while(*(str) != '\0')
  40051a:	eb 33                	jmp    40054f <printf+0x213>
					screen[screen_ctr++] = *str++;
  40051c:	48 8b 05 ed 03 20 00 	mov    0x2003ed(%rip),%rax        # 600910 <exit+0x200161>
  400523:	8b 00                	mov    (%rax),%eax
  400525:	89 c2                	mov    %eax,%edx
  400527:	8d 4a 01             	lea    0x1(%rdx),%ecx
  40052a:	48 8b 05 df 03 20 00 	mov    0x2003df(%rip),%rax        # 600910 <exit+0x200161>
  400531:	89 08                	mov    %ecx,(%rax)
  400533:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  400537:	48 8d 48 01          	lea    0x1(%rax),%rcx
  40053b:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
  40053f:	0f b6 00             	movzbl (%rax),%eax
  400542:	48 8b 0d cf 03 20 00 	mov    0x2003cf(%rip),%rcx        # 600918 <exit+0x200169>
  400549:	48 63 d2             	movslq %edx,%rdx
  40054c:	88 04 11             	mov    %al,(%rcx,%rdx,1)
				continue;

			case 's':
				printed=printed;
				char* str = va_arg(val, char*);
				while(*(str) != '\0')
  40054f:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  400553:	0f b6 00             	movzbl (%rax),%eax
  400556:	84 c0                	test   %al,%al
  400558:	75 c2                	jne    40051c <printf+0x1e0>
					screen[screen_ctr++] = *str++;
				format++;
  40055a:	48 ff 85 78 ff ff ff 	incq   -0x88(%rbp)
				continue;
  400561:	e9 39 01 00 00       	jmpq   40069f <printf+0x363>

			case 'x':
				printed=printed;
				int hex = va_arg(val, int);
  400566:	8b 45 88             	mov    -0x78(%rbp),%eax
  400569:	83 f8 30             	cmp    $0x30,%eax
  40056c:	73 17                	jae    400585 <printf+0x249>
  40056e:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  400572:	8b 45 88             	mov    -0x78(%rbp),%eax
  400575:	89 c0                	mov    %eax,%eax
  400577:	48 01 d0             	add    %rdx,%rax
  40057a:	8b 55 88             	mov    -0x78(%rbp),%edx
  40057d:	83 c2 08             	add    $0x8,%edx
  400580:	89 55 88             	mov    %edx,-0x78(%rbp)
  400583:	eb 0f                	jmp    400594 <printf+0x258>
  400585:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  400589:	48 89 d0             	mov    %rdx,%rax
  40058c:	48 83 c2 08          	add    $0x8,%rdx
  400590:	48 89 55 90          	mov    %rdx,-0x70(%rbp)
  400594:	8b 00                	mov    (%rax),%eax
  400596:	89 45 b4             	mov    %eax,-0x4c(%rbp)
				if(hex<0)
  400599:	83 7d b4 00          	cmpl   $0x0,-0x4c(%rbp)
  40059d:	79 35                	jns    4005d4 <printf+0x298>
				{
					screen[screen_ctr++]='-';
  40059f:	48 8b 05 6a 03 20 00 	mov    0x20036a(%rip),%rax        # 600910 <exit+0x200161>
  4005a6:	8b 00                	mov    (%rax),%eax
  4005a8:	8d 48 01             	lea    0x1(%rax),%ecx
  4005ab:	48 8b 15 5e 03 20 00 	mov    0x20035e(%rip),%rdx        # 600910 <exit+0x200161>
  4005b2:	89 0a                	mov    %ecx,(%rdx)
  4005b4:	48 8b 15 5d 03 20 00 	mov    0x20035d(%rip),%rdx        # 600918 <exit+0x200169>
  4005bb:	48 98                	cltq   
  4005bd:	c6 04 02 2d          	movb   $0x2d,(%rdx,%rax,1)
					print_num(-hex,16);
  4005c1:	8b 45 b4             	mov    -0x4c(%rbp),%eax
  4005c4:	f7 d8                	neg    %eax
  4005c6:	be 10 00 00 00       	mov    $0x10,%esi
  4005cb:	89 c7                	mov    %eax,%edi
  4005cd:	e8 6c fb ff ff       	callq  40013e <print_num>
  4005d2:	eb 0f                	jmp    4005e3 <printf+0x2a7>
				}
				else
					print_num(hex,16);
  4005d4:	8b 45 b4             	mov    -0x4c(%rbp),%eax
  4005d7:	be 10 00 00 00       	mov    $0x10,%esi
  4005dc:	89 c7                	mov    %eax,%edi
  4005de:	e8 5b fb ff ff       	callq  40013e <print_num>

				format++;
  4005e3:	48 ff 85 78 ff ff ff 	incq   -0x88(%rbp)
				continue;
  4005ea:	e9 b0 00 00 00       	jmpq   40069f <printf+0x363>

			case 'p':
				printed=printed;
				long unsigned int ptr =(unsigned long int) va_arg(val, long int );
  4005ef:	8b 45 88             	mov    -0x78(%rbp),%eax
  4005f2:	83 f8 30             	cmp    $0x30,%eax
  4005f5:	73 17                	jae    40060e <printf+0x2d2>
  4005f7:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  4005fb:	8b 45 88             	mov    -0x78(%rbp),%eax
  4005fe:	89 c0                	mov    %eax,%eax
  400600:	48 01 d0             	add    %rdx,%rax
  400603:	8b 55 88             	mov    -0x78(%rbp),%edx
  400606:	83 c2 08             	add    $0x8,%edx
  400609:	89 55 88             	mov    %edx,-0x78(%rbp)
  40060c:	eb 0f                	jmp    40061d <printf+0x2e1>
  40060e:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  400612:	48 89 d0             	mov    %rdx,%rax
  400615:	48 83 c2 08          	add    $0x8,%rdx
  400619:	48 89 55 90          	mov    %rdx,-0x70(%rbp)
  40061d:	48 8b 00             	mov    (%rax),%rax
  400620:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
				print_ptr(ptr,16);
  400624:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  400628:	be 10 00 00 00       	mov    $0x10,%esi
  40062d:	48 89 c7             	mov    %rax,%rdi
  400630:	e8 01 fc ff ff       	callq  400236 <print_ptr>

				format++;
  400635:	48 ff 85 78 ff ff ff 	incq   -0x88(%rbp)
				continue;
  40063c:	eb 61                	jmp    40069f <printf+0x363>


			case '%':
				printed=printed;
				char c='%';
  40063e:	c6 45 a7 25          	movb   $0x25,-0x59(%rbp)

				screen[screen_ctr++] = c;
  400642:	48 8b 05 c7 02 20 00 	mov    0x2002c7(%rip),%rax        # 600910 <exit+0x200161>
  400649:	8b 00                	mov    (%rax),%eax
  40064b:	8d 48 01             	lea    0x1(%rax),%ecx
  40064e:	48 8b 15 bb 02 20 00 	mov    0x2002bb(%rip),%rdx        # 600910 <exit+0x200161>
  400655:	89 0a                	mov    %ecx,(%rdx)
  400657:	48 8b 0d ba 02 20 00 	mov    0x2002ba(%rip),%rcx        # 600918 <exit+0x200169>
  40065e:	48 63 d0             	movslq %eax,%rdx
  400661:	0f b6 45 a7          	movzbl -0x59(%rbp),%eax
  400665:	88 04 11             	mov    %al,(%rcx,%rdx,1)
  400668:	eb 35                	jmp    40069f <printf+0x363>
			}
		}
		else
		{

			screen[screen_ctr++] = *format;
  40066a:	48 8b 05 9f 02 20 00 	mov    0x20029f(%rip),%rax        # 600910 <exit+0x200161>
  400671:	8b 00                	mov    (%rax),%eax
  400673:	8d 48 01             	lea    0x1(%rax),%ecx
  400676:	48 8b 15 93 02 20 00 	mov    0x200293(%rip),%rdx        # 600910 <exit+0x200161>
  40067d:	89 0a                	mov    %ecx,(%rdx)
  40067f:	48 8b 95 78 ff ff ff 	mov    -0x88(%rbp),%rdx
  400686:	0f b6 12             	movzbl (%rdx),%edx
  400689:	48 8b 0d 88 02 20 00 	mov    0x200288(%rip),%rcx        # 600918 <exit+0x200169>
  400690:	48 98                	cltq   
  400692:	88 14 01             	mov    %dl,(%rcx,%rax,1)
			++printed;
  400695:	ff 45 cc             	incl   -0x34(%rbp)
			++format;
  400698:	48 ff 85 78 ff ff ff 	incq   -0x88(%rbp)
	va_list val;
	int printed = 0;
	screen_ctr=0;
	va_start(val, format);

	while(*format)
  40069f:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  4006a6:	0f b6 00             	movzbl (%rax),%eax
  4006a9:	84 c0                	test   %al,%al
  4006ab:	0f 85 e1 fc ff ff    	jne    400392 <printf+0x56>
			++printed;
			++format;
		}
	}

	printed = write(1,screen, screen_ctr);
  4006b1:	48 8b 05 58 02 20 00 	mov    0x200258(%rip),%rax        # 600910 <exit+0x200161>
  4006b8:	8b 00                	mov    (%rax),%eax
  4006ba:	48 98                	cltq   
  4006bc:	48 89 c2             	mov    %rax,%rdx
  4006bf:	48 8b 05 52 02 20 00 	mov    0x200252(%rip),%rax        # 600918 <exit+0x200169>
  4006c6:	48 89 c6             	mov    %rax,%rsi
  4006c9:	bf 01 00 00 00       	mov    $0x1,%edi
  4006ce:	e8 52 00 00 00       	callq  400725 <write>
  4006d3:	89 45 cc             	mov    %eax,-0x34(%rbp)
	if(printed < 0)
  4006d6:	83 7d cc 00          	cmpl   $0x0,-0x34(%rbp)
  4006da:	79 07                	jns    4006e3 <printf+0x3a7>
		return -1;
  4006dc:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  4006e1:	eb 09                	jmp    4006ec <printf+0x3b0>
	return screen_ctr;
  4006e3:	48 8b 05 26 02 20 00 	mov    0x200226(%rip),%rax        # 600910 <exit+0x200161>
  4006ea:	8b 00                	mov    (%rax),%eax

}
  4006ec:	c9                   	leaveq 
  4006ed:	c3                   	retq   

00000000004006ee <syscall_3>:
			"movq %%rax,%0;"
			:"=r"(ret):"m"(n),"m"(a1),"m"(a2));
	return ret;
}

static __inline uint64_t syscall_3(uint64_t n, uint64_t a1, uint64_t a2, uint64_t a3) {
  4006ee:	55                   	push   %rbp
  4006ef:	48 89 e5             	mov    %rsp,%rbp
  4006f2:	48 83 ec 30          	sub    $0x30,%rsp
  4006f6:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  4006fa:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  4006fe:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  400702:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)

	uint64_t ret;
	__asm__("movq %1,%%rax;"
  400706:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40070a:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
  40070e:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  400712:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  400716:	cd 80                	int    $0x80
  400718:	48 89 c0             	mov    %rax,%rax
  40071b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
			"movq %3, %%rsi;"
			"movq %4, %%rdx;"
			"int $0x80;"
			"movq %%rax,%0;"
			:"=r"(ret):"m"(n),"m"(a1),"m"(a2),"m"(a3));
	return ret;
  40071f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
  400723:	c9                   	leaveq 
  400724:	c3                   	retq   

0000000000400725 <write>:
#include <stdlib.h>
#include <stdio.h>
#include <errno.h>


ssize_t write(int fd, const void *buf, size_t count){
  400725:	55                   	push   %rbp
  400726:	48 89 e5             	mov    %rsp,%rbp
  400729:	48 83 ec 28          	sub    $0x28,%rsp
  40072d:	89 7d ec             	mov    %edi,-0x14(%rbp)
  400730:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  400734:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)

	int retvalue=syscall_3(SYS_write,fd,(uint64_t)buf,(uint64_t)count);
  400738:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40073c:	8b 45 ec             	mov    -0x14(%rbp),%eax
  40073f:	48 98                	cltq   
  400741:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  400745:	48 89 c6             	mov    %rax,%rsi
  400748:	bf 01 00 00 00       	mov    $0x1,%edi
  40074d:	e8 9c ff ff ff       	callq  4006ee <syscall_3>
  400752:	89 45 fc             	mov    %eax,-0x4(%rbp)
	if(retvalue >=0){
  400755:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  400759:	78 07                	js     400762 <write+0x3d>
		return retvalue;
  40075b:	8b 45 fc             	mov    -0x4(%rbp),%eax
  40075e:	48 98                	cltq   
  400760:	eb 07                	jmp    400769 <write+0x44>
	}
	return -1;
  400762:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
}
  400769:	c9                   	leaveq 
  40076a:	c3                   	retq   

000000000040076b <syscall_1>:
			:"=r"(ret):"m"(n));

	return ret;
}

static __inline int64_t syscall_1(uint64_t n, uint64_t a1) {
  40076b:	55                   	push   %rbp
  40076c:	48 89 e5             	mov    %rsp,%rbp
  40076f:	48 83 ec 20          	sub    $0x20,%rsp
  400773:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  400777:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)

	int64_t ret;

	__asm__("movq $78,%r15");
  40077b:	49 c7 c7 4e 00 00 00 	mov    $0x4e,%r15
	//__asm__("movq %0,%%rax;"
	//		::"m"(n));

	//while(1);

	if(n==60){
  400782:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  400786:	48 83 f8 3c          	cmp    $0x3c,%rax
  40078a:	75 0c                	jne    400798 <syscall_1+0x2d>
		__asm__("movq %0,%%rax;"
  40078c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  400790:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
  400794:	cd 80                	int    $0x80
  400796:	eb 11                	jmp    4007a9 <syscall_1+0x3e>

		//while(1);
	}
	else{

		__asm__("movq %1,%%rax;"
  400798:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40079c:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
  4007a0:	cd 80                	int    $0x80
  4007a2:	48 89 c0             	mov    %rax,%rax
  4007a5:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
				"movq %2,%%rdi;"
				"int $0x80;"
				"movq %%rax,%0;"
				:"=r"(ret):"m"(n),"m"(a1));
	}
	return ret;
  4007a9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
  4007ad:	c9                   	leaveq 
  4007ae:	c3                   	retq   

00000000004007af <exit>:
#include <sys/defs.h>
#include <syscall.h>
#include <stdlib.h>
#include <sys/syscall.h>

void exit(int status){
  4007af:	55                   	push   %rbp
  4007b0:	48 89 e5             	mov    %rsp,%rbp
  4007b3:	48 83 ec 08          	sub    $0x8,%rsp
  4007b7:	89 7d fc             	mov    %edi,-0x4(%rbp)

	syscall_1(SYS_exit,44);
  4007ba:	be 2c 00 00 00       	mov    $0x2c,%esi
  4007bf:	bf 3c 00 00 00       	mov    $0x3c,%edi
  4007c4:	e8 a2 ff ff ff       	callq  40076b <syscall_1>


}
  4007c9:	c9                   	leaveq 
  4007ca:	c3                   	retq   
